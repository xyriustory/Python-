{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"},"colab":{"name":"1-3.ipynb のコピー","provenance":[{"file_id":"https://github.com/UTokyo-IPP/utpython/blob/master/1/1-3.ipynb","timestamp":1600848691969}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"zQtkRkdBBGOW","colab_type":"text"},"source":["# 1-3. 論理・比較演算と条件分岐の基礎\n","論理・比較演算と条件分岐の基礎について説明します。\n","\n","参考\n","\n","- https://docs.python.org/ja/3/tutorial/controlflow.html\n","- https://docs.python.org/ja/3/reference/compound_stmts.html\n","- https://docs.python.org/ja/3/library/stdtypes.html"]},{"cell_type":"markdown","metadata":{"id":"E071bNzEBGOb","colab_type":"text"},"source":["## if文による条件分岐\n","制御構造については第2回と第3回で本格的に扱いますが、\n","ここでは **`if`** による**条件分岐**（**if文**）の基本的な形だけ紹介します。"]},{"cell_type":"code","metadata":{"id":"oYJQnvnCBGOe","colab_type":"code","colab":{}},"source":["def bmax(a,b):\n","    if a > b: \n","        return a \n","    else:\n","        return b"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GFeT_iFtBGOz","colab_type":"text"},"source":["上の関数 `bmax` は、2つの引数の大きい方\n","（正確には小さくない方）を返します。"]},{"cell_type":"markdown","metadata":{"id":"EejKB8sTBGO3","colab_type":"text"},"source":["ここで `if` による条件分岐が用いられています。\n","\n","----\n","```Python\n","    if a > b: \n","        return a \n","    else:\n","        return b\n","```\n","----\n","`a` が `b` より大きければ `a` が返され、そうでなければ、`b` が返されます。\n","\n","ここで、`return a` が、`if` より右にインデントされていることに注意してください。\n","`return a` は、`a > b` が成り立つときのみ実行されます。\n","\n","**`else`** は `if` の右の条件が成り立たない場合を示しています。\n","`else:` として、必ず `:` が付くことに注意してください。\n","\n","また、`return b` も、`else` より右にインデントされていることに注意してください。\n","`if` と `else` は同じインデントになります。"]},{"cell_type":"code","metadata":{"id":"ZH8mkhTABGO8","colab_type":"code","colab":{}},"source":["bmax(3,5)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6VKWAzDYBGPI","colab_type":"text"},"source":["関数の中で `return` と式が実行されますと、関数は即座に返りますので、\n","関数定義の中のその後の部分は実行されません。\n","\n","たとえば、上の条件分岐は以下のように書くこともできます。\n","\n","----\n","```Python\n","    if a > b: \n","        return a \n","    return b\n","```\n","----\n","\n","ここでは、`if` から始まる条件分岐には `else:` の部分がありません。\n","条件分岐の後に `return b` が続いています。\n","（`if` と `return b` のインデントは同じです。）\n","\n","`a > b` が成り立っていれば、`return a` が実行されて a の値が返ります。\n","したがって、その次の `return b` は実行されません。\n","\n","`a > b` が成り立っていなければ、`return a` は実行されません。\n","これで条件分岐は終わりますので、その次にある `return b` が実行されます。"]},{"cell_type":"markdown","metadata":{"id":"QLdyo23dBGPK","colab_type":"text"},"source":["なお、Pythonでは、`max` という関数があらかじめ定義されています。（すなわち、`max` は組み込み関数です。）"]},{"cell_type":"code","metadata":{"id":"CmxfldoKBGPO","colab_type":"code","colab":{}},"source":["max(3,5)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6_otZC40BGPa","colab_type":"text"},"source":["## 様々な条件\n","`if` の右などに来る条件として様々なものを書くことができます。これらの条件には **`>`** や **`<`** などの**比較演算子**が含まれています。\n","\n","```Python\n","    x < y         # x は y より小さい\n","    x <= y        # x は y 以下\n","    x > y         # x は y より大きい\n","    x >= y        # x は y 以上\n","    x == y        # x と y は等しい\n","    x != y        # x と y は等しくない\n","```\n","\n","特に等しいかどうかの比較には **`==`** という演算子が使われることに注意してください。\n","`=` は代入の演算子です。\n","\n","**`<=`** は小さいか等しいか、**`>=`** は大きいか等しいかを表します。\n","**`!=`** は等しくないことを表します。"]},{"cell_type":"markdown","metadata":{"id":"wQPB1trPBGPb","colab_type":"text"},"source":["さらに、このような基本的な条件を、\n","**`and`** と **`or`** を用いて組み合わせることができます。\n","\n","```Python\n","    i >= 0 and j > 0   # i は 0 以上で、かつ、j は 0 より大きい\n","    i < 0 or j > 0     # i は 0 より小さいか、または、j は 0 より大きい\n","```\n","\n","`i` が 1 または 2 または 3 である、という条件は以下のようになります。\n","\n","```Python\n","    i == 1 or i == 2 or i == 3\n","```\n","\n","これを `i == 1 or 2 or 3` と書くことはできませんので、注意してください。\n","\n","また、**`not`** によって条件の否定をとることもできます。\n","\n","```Python\n","    not x < y          # x は y より小さくない（x は y 以上）\n","```"]},{"cell_type":"markdown","metadata":{"id":"SbO6i2tiBGPd","colab_type":"text"},"source":["比較演算子は、以下のように連続して用いることもできます。"]},{"cell_type":"code","metadata":{"id":"072FGMJCBGPf","colab_type":"code","colab":{}},"source":["1 < 2 < 3"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o6Foxk2sBGPo","colab_type":"code","colab":{}},"source":["3 >= 2 < 5"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gH05Z6nHBGPu","colab_type":"text"},"source":["## 練習\n","\n","1. 数値 `x` の絶対値を求める関数 `absolute(x)` を定義してください。\n","   （Pythonには `abs` という組み込み関数が用意されていますが。）\n","2. `x` が正ならば 1、負ならば -1、ゼロならば 0 を返す `sign(x)` という関数を定義してください。\n","\n","定義ができたら、その次のセルを実行して、`True` のみが表示されることを確認してください。"]},{"cell_type":"code","metadata":{"id":"tR4pdRyzBGPw","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600849048351,"user_tz":-540,"elapsed":371,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["def absolute(x):\n","  if x > 0:\n","    return x\n","  else:\n","    return -x"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"6ksbIzEtBGP5","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600849048959,"user_tz":-540,"elapsed":394,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["def sign(x):\n","  if x > 0:\n","    return 1\n","  elif x < 0:\n","    return -1\n","  else:\n","    return 0"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"tags":["raises-exception"],"id":"pppPw83ZBGQA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"executionInfo":{"status":"ok","timestamp":1600849049822,"user_tz":-540,"elapsed":584,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"5540b856-0135-456e-face-d181f5b30173"},"source":["print(absolute(5) == 5)\n","print(absolute(-5) == 5)\n","print(absolute(0) == 0)\n","print(sign(5) == 1)\n","print(sign(-5) == -1)\n","print(sign(0) == 0)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["True\n","True\n","True\n","True\n","True\n","True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"H2eYqWuRBGQI","colab_type":"text"},"source":["## 真理値を返す関数\n","ここで、真理値を返す関数について説明します。\n","\n","Pythonが扱うデータには様々な種類があります。\n","数については既に見て来ました。\n","\n","**真理値**とは、 **`True`** または **`False`** のどちらかの値のことです。\n","これらは変数ではなく、**組み込み定数**であることに注意してください。\n","\n","- `True` は、正しいこと（**真**）を表します。\n","- `False` は、間違ったこと（**偽**）を表します。\n","\n","実は、`if` の後の条件の式は、`True` か `False` を値として持ちます。"]},{"cell_type":"code","metadata":{"id":"pYagTFgiBGQK","colab_type":"code","colab":{}},"source":["x = 3"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gRinxFZ5BGQP","colab_type":"code","colab":{}},"source":["x > 1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Mz6gii5fBGQV","colab_type":"text"},"source":["上のように、`x` に 3 を代入しておくと、\n","`x > 1` という条件は成り立ちます。\n","したがって、`x > 1` という式の値は `True` になるのです。"]},{"cell_type":"code","metadata":{"id":"bG-kWWSxBGQX","colab_type":"code","colab":{}},"source":["x < 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zHfcet7LBGQh","colab_type":"code","colab":{}},"source":["x%2 == 0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KkrqX8f4BGQm","colab_type":"text"},"source":["そして、真理値を返す関数を定義することができます。"]},{"cell_type":"code","metadata":{"id":"24kbsOJcBGQn","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600849105063,"user_tz":-540,"elapsed":490,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["def is_even(x):\n","    return x%2 == 0"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_xXQGcv8BGQr","colab_type":"text"},"source":["この関数は、`x` を 2 で割った余りが 0 に等しいかどうかという\n","条件の結果である真理値を返します。\n","\n","`x == y` は、`x` と `y` が等しいかどうかという条件です。\n","この関数は、この条件の結果である真理値を `return` によって返しています。"]},{"cell_type":"code","metadata":{"id":"YIofCjBgBGQr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600849106791,"user_tz":-540,"elapsed":653,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"28f46d23-f89f-4eaa-cd3f-e8a725fd2c6a"},"source":["is_even(2)"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"S-FOI5WrBGQy","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600849108204,"user_tz":-540,"elapsed":499,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"ba5ff3bb-7d07-4c45-8b7c-56e0f74ae6bd"},"source":["is_even(3)"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"qS94JhlTBGQ4","colab_type":"text"},"source":["このような関数は、`if` の後に使うことができます。"]},{"cell_type":"code","metadata":{"id":"nx5mtUlyBGQ6","colab_type":"code","colab":{}},"source":["def is_odd(x):\n","    if is_even(x):\n","        return False\n","    else:\n","        return True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"liEYElvDBGQ_","colab_type":"text"},"source":["このように、直接に `True` や `False` を返すこともできます。"]},{"cell_type":"code","metadata":{"id":"TY9iAoNCBGRA","colab_type":"code","colab":{}},"source":["is_odd(2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y6LPBWioBGRF","colab_type":"code","colab":{}},"source":["is_odd(3)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z5OCtc6DBGRL","colab_type":"text"},"source":["## オブジェクト\n","\n","Pythonにおける値（式の評価結果）は全て**オブジェクト**と総称されます。\n","変数の値もオブジェクトです。\n","\n","したがって、数や真理値もオブジェクトです。\n","今後、文字列やリストなど、様々な種類のデータが登場しますが、\n","それらは全てオブジェクトです。\n","\n","今後、オブジェクトという用語がところどころで出て来ますが、\n","オブジェクトとデータは同義と思って差し支えありません。\n","正確には、式の評価結果や変数の値となるデータがオブジェクトです。"]},{"cell_type":"markdown","metadata":{"id":"P_HOpz6QBGRM","colab_type":"text"},"source":["## `None`\n","**`None`** というデータがあります。\n","\n","セルの中の式を評価した結果が `None` になると、\n","何も表示されません。"]},{"cell_type":"code","metadata":{"id":"eQkhnYsqBGRN","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600849139817,"user_tz":-540,"elapsed":502,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["None"],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"S_Qg7SzBBGRT","colab_type":"text"},"source":["`print` で無理やり表示させると以下のようになります。"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"9iH-rCXTBGRU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600849143602,"user_tz":-540,"elapsed":508,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f5b48a2f-92b5-4453-fc02-e36937e28007"},"source":["print(None)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PxVeS1WdBGRX","colab_type":"text"},"source":["`None` という値は、特段の値が何もない、\n","ということを表すために使われることがあります。"]},{"cell_type":"markdown","metadata":{"id":"VW3JKnVBBGRY","colab_type":"text"},"source":["条件としては、`None` は偽と同様に扱われます。"]},{"cell_type":"code","metadata":{"id":"xTnFBA9CBGRa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600849148984,"user_tz":-540,"elapsed":471,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"82658a87-a4a3-4041-e9cf-c6759b529581"},"source":["if None:\n","    print('OK')\n","else:\n","    print('NG')"],"execution_count":17,"outputs":[{"output_type":"stream","text":["NG\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GGzL4l13BGRe","colab_type":"text"},"source":["`return` の後に式を書かないことがあります。\n","\n","---\n","```Python\n","    return\n","```\n","---\n","\n","この場合、以下のように `None` が指定されているとみなされます。\n","\n","---\n","```Python\n","    return None\n","```\n","---\n","\n","このようなreturn文を実行すると、関数の実行はそこで終了して `None` が返ります。"]},{"cell_type":"markdown","metadata":{"id":"HGppPCjnBGRf","colab_type":"text"},"source":["## ▲条件として使われる他の値\n","`True` と `False` の他に、他の種類のデータも、条件としても用いることができます。\n","\n","たとえば:\n","\n","- 数のうち、0 や 0.0 は偽、その他は真とみなされます。\n","- 文字列では、空文字列 `''` のみ偽、その他は真とみなされます。（文字列については2-1を参照。）\n","- 組み込み定数 `None` は偽とみなされます。（`None` については上記参照。）"]},{"cell_type":"code","metadata":{"id":"KRxZ83-BBGRg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600849211067,"user_tz":-540,"elapsed":555,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"621f6fcf-906c-48f6-8a4e-c3d1d5a22d04"},"source":["if 0:\n","    print('OK')\n","else:\n","    print('NG')"],"execution_count":18,"outputs":[{"output_type":"stream","text":["NG\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JQfHSsB-BGRk","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600849213437,"user_tz":-540,"elapsed":523,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"60cedc2e-20f6-44b3-f3f5-6e5c0fbd020d"},"source":["if -1.1:\n","    print('OK')\n","else:\n","    print('NG')"],"execution_count":19,"outputs":[{"output_type":"stream","text":["OK\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HOV5COXWBGRo","colab_type":"text"},"source":["## ▲再帰\n","\n","一般に、定義しようとするもの自身を定義の中で参照することを、\n","**再帰**と言います。\n","再帰による定義を再帰的定義と言います。\n","\n","たとえば、数列の漸化式は再帰的定義と考えられます。\n","実際に、`n` 番目のフィボナッチ数を `fib(n)` とおくと、\n","`fib(n)` は次のような漸化式を満たします。\n","\n","```Python\n","fib(n) = n  ただし n<2\n","fib(n) = fib(n-1) + fib(n-2)  ただし n>=2\n","```\n","\n","この漸化式を用いて以下のように実際にフィボナッチ数を計算することができます。\n","```Python\n","fib(0) = 0\n","fib(1) = 1\n","fib(2) = fib(1) + fib(0) = 1 + 0 = 1\n","fib(3) = fib(2) + fib(1) = 1 + 1 = 2\n","fib(4) = fib(3) + fib(2) = 2 + 1 = 3\n","fib(5) = fib(4) + fib(3) = 3 + 2 = 5\n","...\n","```\n","\n","この漸化式から、以下のように `fib(n)` の再帰的定義が得られます。"]},{"cell_type":"code","metadata":{"id":"ER1gOTXeBGRp","colab_type":"code","colab":{}},"source":["def fib(n):\n","    if n < 2:\n","        return n\n","    else:\n","        return fib(n-1) + fib(n-2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C7X45t46BGRt","colab_type":"text"},"source":["実際に、以下のように `fib(n)` の値が求まります。"]},{"cell_type":"code","metadata":{"id":"cOs1JQAOBGRu","colab_type":"code","colab":{}},"source":["fib(10)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"90v67HYbBGRz","colab_type":"text"},"source":["## 練習の解答"]},{"cell_type":"code","metadata":{"id":"Omuu5dXjBGR0","colab_type":"code","colab":{}},"source":["def absolute(x):\n","    if x<0:\n","        return -x\n","    else:\n","        return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dX_nDA7TBGR5","colab_type":"code","colab":{}},"source":["def sign(x):\n","    if x<0:\n","        return -1\n","    if x>0:\n","        return 1\n","    return 0"],"execution_count":null,"outputs":[]}]}