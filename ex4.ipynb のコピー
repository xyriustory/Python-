{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"colab":{"name":"ex4.ipynb のコピー","provenance":[{"file_id":"https://github.com/UTDataMining/2020A/blob/master/ex4/ex4.ipynb","timestamp":1603698226920}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"ueeKt7nI3OVU"},"source":["# 課題4 テキストデータ分析\n","配点\n","- Q1, 1P\n","- Q2, 2P\n","- Q3, 5P\n","- Q4, 2P\n","\n","必要なモジュールのimport"]},{"cell_type":"code","metadata":{"id":"_mGv6We23OVW"},"source":["import json\n","import csv\n","import numpy as np\n","import pandas as pd"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"srGWDjo13OVb"},"source":["## Q1\n","\n","$n$-次元ベクトル空間における、任意の2つのベクトル、$ \\vec{x}=(x_1,x_2,...,x_n)$、$\\vec{y}=(y_1,y_2,...,y_n)$、の間のcos類似度 $cos( \\vec{x}, \\vec{y})$ は以下のように定義されます。\n","\n","$cos( \\vec{x}, \\vec{y}) =  \\frac{\\vec{x}\\cdot \\vec{y}}{\\|x\\|_2\\|y\\|_2}=\\frac{\\Sigma^{n}_{i=1}{x_{i}y_{i}}}{\\sqrt{\\Sigma^{n}_{i=1}x_{i}^{2}}\\sqrt{\\Sigma^{n}_{i=1}y_{i}^{2}}}$\n","\n","入力ベクトル $\\vec{x}$, $\\vec{y}$ をそれぞれ`NumPy` の配列として引数で受け取り、それらのベクトル間のcos類似度を計算して返す関数 `cos_sim` を完成させてください。"]},{"cell_type":"code","metadata":{"id":"_5VRLxaC3OVc"},"source":["def cos_sim(vec1, vec2):\n","    return np.dot(vec1,vec2)/np.sqrt(sum([x**2 for x in vec1])*sum([x**2 for x in vec2]))# (vec1とvec2の内積)/np.sqrt(vec1の要素の二乗和*vec2の要素の二乗和)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TAJm30-33OVg"},"source":["`cos_sim()`関数が完成したら、以下のセルを実行して動作を確認してください。`-1.0, 1.0, 0.0`がそれぞれのcos類似度です。"]},{"cell_type":"code","metadata":{"id":"03yq8J7t3OVg"},"source":["print(cos_sim(np.array([1,0]), np.array([-1,0])))\n","print(cos_sim(np.array([1,0]), np.array([1,0])))\n","print(cos_sim(np.array([1,0]), np.array([0,-1])))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"96Xo1ETK3OVj"},"source":["assert cos_sim(np.array([1,0]), np.array([-1,0])) == -1.0\n","assert cos_sim(np.array([1,0]), np.array([1,0])) ==  1.0\n","assert cos_sim(np.array([1,0]), np.array([0,-1])) == 0.0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2-3t8_cq3OVl"},"source":["## Q2\n","\"course_list.csv\"ファイルには以下のように各行に授業名のテキストデータ（文字コードはUTF8）が含まれています。以下では、このファイルを読み込み、各授業のベクトルを作成し、授業間の類似度を求めるコードを実装します。\n","```Python\n","## course_list.csvファイル\n","...\n","計量経済学Ⅰ\n","数理統計\n","計量経済学\n","経済史Ⅱ\n","ICTマネジメントⅠ\n","現代日本経済史\n","経済学史\n","...\n","```"]},{"cell_type":"code","metadata":{"id":"eYgAX8yI3OVm"},"source":["# Colaboratoryでは以下を実行して必要なファイルをダウンロード\n","!wget https://raw.githubusercontent.com/UTDataMining/2020A/master/ex4/course_list.csv"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"upDPUpjw3OVo"},"source":["### Q2.1\n","引数`file`に与えられたファイル名のファイルを1行ずつ**順番に**読み込み、その各行を要素とするリストを作成して返す`create_list`関数を完成さてください。作成されたリストは変数`courses`で受け取ります。以降の処理では、リスト`courses`のインデックスをその要素（授業名）のIDとして扱います。\n"]},{"cell_type":"code","metadata":{"id":"9jmH_H3e3OVo"},"source":["def create_list(file):\n","    lst=[]\n","    with open(file, 'r',  encoding=\"utf-8\") as f:\n","        dataReader = csv.reader(f)\n","        for row in dataReader:\n","            lst.append(row[0])# lstにrow[0]を追加\n","    return lst"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TWtCu7rO3OVq"},"source":["`create_list`関数が完成したら、以下のセルを実行して動作を確認してください。リストの長さ（授業の数）は`4678`、\"Pythonプログラミング入門\"授業のID（リスト`courses`のインデックス）は`6`となります。"]},{"cell_type":"code","metadata":{"id":"1wov3_PS3OVq"},"source":["courses = create_list('course_list.csv')\n","print(len(courses))\n","print(courses.index('Pythonプログラミング入門'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LhjvHjHX3OVr"},"source":["assert len(courses) == 4678\n","assert courses.index('Pythonプログラミング入門') == 6"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HKooSt843OVt"},"source":["\"keyword_list.csv\"ファイルには以下のように各行に1単語が含まれています（文字コードはUTF8）。\n","```Python\n","## keyword_list.csvファイル\n","...\n","資源\n","広域\n","フランス語\n","語学\n","教育法\n","環境学\n","相関\n","解析学\n","森林\n","...\n","```\n","上記と同様に`create_list`関数により、\"keywor_list.csv\"ファイルを1行ずつ**順番に**読み込み、その各行を要素とするリストを作成します。作成されたリストは変数`vocab`で受け取ります。以降の処理では、リスト`vocab`のインデックスをその要素（単語）のIDとして扱います。リスト`vocab`は以降の処理における語彙となります。"]},{"cell_type":"code","metadata":{"id":"2SMqNS1X3OVt"},"source":["# Colaboratoryでは以下を実行して必要なファイルをダウンロード\n","!wget https://raw.githubusercontent.com/UTDataMining/2020A/master/ex4/keyword_list.csv"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4ySVch-B3OVv"},"source":["以下のセルを実行して動作を確認してください。リストの長さ（単語の数）は`910`、単語\"プログラミング\"のID（リスト`vocab`のインデックス）は`113`、単語\"英語\"のID（リスト`vocab`のインデックス）は`15`となります。となります。"]},{"cell_type":"code","metadata":{"id":"WNxfMDKY3OVv"},"source":["vocab = create_list('keyword_list.csv')\n","print(len(vocab))\n","print(vocab.index('プログラミング'))\n","print(vocab.index('英語'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r4jJslOz3OVy"},"source":["assert len(vocab) == 910\n","assert vocab.index('プログラミング') == 113\n","assert vocab.index('英語') == 15"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u09PuML43OVz"},"source":["### Q2.2\n","リスト`courses`と`vocab`を引数で受け取り、単語のID（リスト`vocab`のその単語のインデックス）をキー、その単語のDF（Document Frequency)を値とする辞書を作成して返す`count_df`関数を作成してください。作成された辞書は変数`df`で受け取ります。この場合、ある単語のDFはその単語を授業名に含む授業数に対応します。**単語が授業名に複数回含まれる場合でも1回と数えます**"]},{"cell_type":"code","metadata":{"id":"rzOzxjgK3OVz"},"source":["def count_df(courses, vocab):\n","    dic={}\n","    for i in range(len(vocab)):\n","        for course in courses:\n","            if vocab[i] in course:# courseがvocab[i]を含むという条件:\n","                if dic.get(i) is None:\n","                  dic[i] = 1# dic[i]を1つ増やす\n","                else:\n","                  dic[i] += 1\n","                  #　dicにiのキーがまだない場合に注意\n","    return dic"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zsloqu6d3OV0"},"source":["`count_df`関数が完成したら、以下のセルを実行して動作を確認してください。辞書の長さは`910`、単語\"プログラミング\"（IDは`113`）のDFは`23`、単語\"英語\"（IDは`15`）のDFは`145`となります。"]},{"cell_type":"code","metadata":{"id":"wGJJH2eI3OV1"},"source":["df = count_df(courses, vocab)\n","print(len(df))\n","print(vocab.index('プログラミング'), df[vocab.index('プログラミング')])\n","print(vocab.index('英語'), df[vocab.index('英語')])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C3bqMQkT3OV2"},"source":["assert len(df) == 910\n","assert df[113] == 23\n","assert df[15] == 145"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HZtf0V9z3OV3"},"source":["## Q3\n","### Q3.1\n","リスト`vocab`の各単語を次元とする授業ベクトルを考えます。授業ベクトルの長さはリスト`vocab`の長さと等しく、リスト`vocab`のインデックス`i`の単語`vocab[i]`が授業名に含まれる時、授業ベクトルの`i`番目の要素は`1`、含まれなければ`0`とします。\n","\n","以下では、リスト`courses`と`vocab`を引数で受け取り、リスト`courses`の各授業のベクトルを行、リスト`vocab`の各単語を列とした`NumPy`の行列を作成して返す`lec_word_matrix`関数を完成させてください。作成した授業-単語行列は、授業（行）の授業名に単語（列）が含まれていれば、その要素が1であるような行列です。"]},{"cell_type":"code","metadata":{"id":"WIRWhVcq3OV4"},"source":["def lec_word_matrix(courses, vocab):\n","    mat = np.zeros((len(courses),len(vocab)))# 授業数, 単語数)) # 授業数x単語数の0要素の行列を初期化\n","    for i in range(len(courses)):\n","        for j in range(len(vocab)):\n","            if vocab[j] in courses[i]:# courses[i]がvocab[j]を含むという条件:\n","                mat[i,j] = 1# mat[i, j]に1を代入\n","    return mat"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BbevkcMF3OV5"},"source":["`lec_word_matrix`関数が完成したら、以下のセルを実行して動作を確認してください。作成した授業-単語行列の要素の値の和は`17406`となります。"]},{"cell_type":"code","metadata":{"id":"C-VJhmVs3OV5"},"source":["bi_matrix = lec_word_matrix(courses, vocab)\n","np.sum(bi_matrix)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LptMgFIW3OV6"},"source":["assert np.sum(lec_word_matrix(courses, vocab)) == 17406"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Rj0auZVx3OV8"},"source":["### Q3.2\n","Q3.1で作成した授業-単語行列の各要素を、その授業の授業名に単語が含まれるか否かの1or0ではなく、その授業の授業名に単語が何回含まれるか（TF: Term Frequency)で表した行列を作成して返す`lec_word_tf_matrix`関数を完成させてください。"]},{"cell_type":"code","metadata":{"id":"SBcFTBba3OV8"},"source":["def lec_word_tf_matrix(courses, vocab):\n","    mat = np.zeros((len(courses),len(vocab)))# 授業数, 単語数)) # 授業数x単語数の0要素の行列を初期化\n","    for i in range(len(courses)):\n","        for j in range(len(vocab)):\n","            if vocab[j] in courses[i]:# courses[i]がvocab[j]を含むという条件:\n","                mat[i,j] = courses[i].count(vocab[j])# courses[i]に含まれるvocab[j]の数（ヒント count())をmat[i, j]に代入\n","    return mat"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KNFDUzr63OV9"},"source":["`lec_word_tf_matrix`関数が完成したら、以下のセルを実行して動作を確認してください。作成した授業-単語行列の要素の値の和は`17732`となります。"]},{"cell_type":"code","metadata":{"id":"gDzKyDu-3OV9","executionInfo":{"status":"ok","timestamp":1603705971647,"user_tz":-540,"elapsed":867,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"37910f28-9490-446c-dc4e-abf3fe82bf3e","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["tf_matrix = lec_word_tf_matrix(courses, vocab)\n","np.sum(tf_matrix)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["17732.0"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"5GOnUBAX3OV-"},"source":["授業「総合社会科学高度教養（計量社会科学研究）」には「科学」が2回含まれるので対応する行列の要素の値は2となります。"]},{"cell_type":"code","metadata":{"id":"38hfAVVv3OV_","executionInfo":{"status":"ok","timestamp":1603705974215,"user_tz":-540,"elapsed":682,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"2085d96e-6dd2-4ef9-a5b6-0f5779c1ec78","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["tf_matrix[courses.index('総合社会科学高度教養（計量社会科学研究）'), vocab.index('科学')]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.0"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"ED6q0dVe3OWA"},"source":["assert np.sum(lec_word_tf_matrix(courses, vocab)) == 17732\n","assert lec_word_tf_matrix(courses, vocab)[courses.index('総合社会科学高度教養（計量社会科学研究）'), vocab.index('科学')] == 2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h-q90khJ3OWB"},"source":["### Q3.3\n","Q3.2で作成した授業-単語行列の各要素（授業`i`の単語`j`の$TF_{ij}$）にその単語のIDF値を掛けたTFIDF値を要素とする行列を作成して返す`lec_word_tfidf_matrix`関数を完成させてください。作成した行列は変数`tfidf_matrix`で受け取ります。\n","\n","ここで、授業`i`、単語`j`のTFIDF値は以下のように定義されます。\n","```Python\n","TFIDF=TF_ij*log(すべての授業数/単語jのDF)=TF_ij*log(len(courses)/df[j])\n","```\n","`log`の計算には`np.log()`を使用してよいです。"]},{"cell_type":"code","metadata":{"id":"dtuMFJ743OWB","executionInfo":{"status":"ok","timestamp":1603715190153,"user_tz":-540,"elapsed":839,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["def lec_word_tfidf_matrix(courses, vocab, df):\n","    ### 引数：\n","    # courses: 授業リスト\n","    # vocab: 単語リスト\n","    # df: DF辞書\n","    \n","    ###  Q3.2のmat[i,j]を\"授業名iの単語jのTFIDF値\"とした行列を作成するコード ###\n","    mat = np.zeros((len(courses),len(vocab)))# 授業数, 単語数)) # 授業数x単語数の0要素の行列を初期化\n","    for i in range(len(courses)):\n","        for j in range(len(vocab)):\n","            if vocab[j] in courses[i]:# courses[i]がvocab[j]を含むという条件:\n","                mat[i,j] = courses[i].count(vocab[j])*np.log((len(courses)/df[j]))\n","    \n","    return mat### 上記で作成した行列を返す ###"],"execution_count":51,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nSVvZoyj3OWC"},"source":["`lec_word_tfidf_matrix`関数が完成したら、以下のセルを実行して動作を確認してください。作成した授業-単語行列の要素の値の和の整数部分は`76994`となります。"]},{"cell_type":"code","metadata":{"id":"iiyQZWSK3OWD","executionInfo":{"status":"ok","timestamp":1603715192851,"user_tz":-540,"elapsed":969,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"6546de71-3ded-4e3a-e8d7-5639f071ee2e","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["tfidf_matrix = lec_word_tfidf_matrix(courses, vocab, df)\n","int(np.sum(tfidf_matrix))"],"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["76994"]},"metadata":{"tags":[]},"execution_count":52}]},{"cell_type":"markdown","metadata":{"id":"VhrGywKR3OWE"},"source":["授業「総合社会科学高度教養（計量社会科学研究）」には「科学」が`2`回含まれ、「科学」のDF値は`412`なので対応する行列の要素の値は$2*log(4678/412)\\simeq4.85$となります。"]},{"cell_type":"code","metadata":{"id":"KswaopL33OWE","executionInfo":{"status":"ok","timestamp":1603715195609,"user_tz":-540,"elapsed":901,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"c7cb61bc-1bed-49c9-f6bd-3ce80bca7b6c","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(df[vocab.index('科学')])\n","print(tfidf_matrix[courses.index('総合社会科学高度教養（計量社会科学研究）'), vocab.index('科学')])"],"execution_count":53,"outputs":[{"output_type":"stream","text":["412\n","4.859205195589196\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VoLc_z_F3OWF","executionInfo":{"status":"ok","timestamp":1603715199977,"user_tz":-540,"elapsed":561,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["assert int(np.sum(tfidf_matrix)) == 76994\n","assert df[vocab.index('科学')] == 412\n","assert int(tfidf_matrix[courses.index('総合社会科学高度教養（計量社会科学研究）'), vocab.index('科学')]*100) == 485"],"execution_count":55,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JUWrv5Ts3OWG"},"source":["## Q4\n","Q3.3で作成した授業-単語行列を元に、入力の授業に対してcos類似度に基づいて他のすべての授業との類似度を計算し、類似する授業名をキー、その類似度を値とした辞書を返す以下の`find_similar_course`関数を完成させてください。その際、**入力の授業および類似度が0の授業は辞書に含めない**ようにしてください。cos類似度の計算にはQ1で作成した関数を使ってもよいです。"]},{"cell_type":"code","metadata":{"id":"RdRyJLE43OWG","executionInfo":{"status":"ok","timestamp":1603716290693,"user_tz":-540,"elapsed":646,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["def find_similar_course(target, tfidf_matrix, courses):\n","    ### 引数：\n","    # target:  入力授業のID\n","    # tfidf_matrix: Q3.3で作成した授業-単語行列\n","    # courses: 授業リスト\n","\n","    ### 入力授業のベクトルtfidf_matrix[target]と各授業iのベクトルtfidf_matrix[i]の類似度を計算するコード ###\n","    dic = {} \n","    for i in range(len(tfidf_matrix)):\n","      if i == target:\n","        continue\n","      cosim = cos_sim(tfidf_matrix[target],tfidf_matrix[i]) \n","      if cosim == 0:\n","        continue\n","      dic[courses[i]] = cosim\n","    return dic### 類似する授業名をキー、その類似度を値とする辞書を返す ###"],"execution_count":66,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SN3Ll0QZ3OWJ"},"source":["`find_similar_course`関数が完成したら、以下のセルを実行して動作を確認してください。\n","\n","入力の授業`再生可能エネルギーと公共政策`に類似した上位の授業は、`公共政策、金融市場と公共政策、文化人類学特殊演習（公共政策論）、エネルギー政策、河川流域の環境とその再生、...`となります。\n","\n","類似した授業数は68となります。"]},{"cell_type":"code","metadata":{"id":"Tkm-eESB3OWJ","executionInfo":{"status":"ok","timestamp":1603716296504,"user_tz":-540,"elapsed":5121,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"097e00e4-4f92-4913-aaf4-126bb0b80fc8","colab":{"base_uri":"https://localhost:8080/","height":376}},"source":["title=\"再生可能エネルギーと公共政策\" # 入力の授業名\n","\n","results=find_similar_course(courses.index(title), tfidf_matrix, courses) # 類似授業の辞書を受け取る\n","print(len(results))\n","\n","ranking = pd.DataFrame(list(results.items()), columns=['title', \"similarity\"]) # 類似度が上位の授業を表示\n","ranking.sort_values(by='similarity', ascending=False).head(10)"],"execution_count":67,"outputs":[{"output_type":"stream","text":["68\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>title</th>\n","      <th>similarity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>26</th>\n","      <td>公共政策</td>\n","      <td>0.649841</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>金融市場と公共政策</td>\n","      <td>0.483719</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>文化人類学特殊演習（公共政策論）</td>\n","      <td>0.475690</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>エネルギー政策</td>\n","      <td>0.442935</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>河川流域の環境とその再生</td>\n","      <td>0.413535</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>エネルギー・資源政策論</td>\n","      <td>0.366721</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>発生・再生生物学</td>\n","      <td>0.303553</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>公共経営学</td>\n","      <td>0.277481</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>エネルギー変換工学</td>\n","      <td>0.267711</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>エネルギーと社会</td>\n","      <td>0.266535</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               title  similarity\n","26              公共政策    0.649841\n","3          金融市場と公共政策    0.483719\n","30  文化人類学特殊演習（公共政策論）    0.475690\n","1            エネルギー政策    0.442935\n","62      河川流域の環境とその再生    0.413535\n","45       エネルギー・資源政策論    0.366721\n","12          発生・再生生物学    0.303553\n","61             公共経営学    0.277481\n","56         エネルギー変換工学    0.267711\n","59          エネルギーと社会    0.266535"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"qjnDBr2q3OWK","executionInfo":{"status":"ok","timestamp":1603716301564,"user_tz":-540,"elapsed":520,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["assert len(results) == 68\n","assert ranking.sort_values(by='similarity', ascending=False).iloc[0,0] == '公共政策'\n","assert int(ranking.sort_values(by='similarity', ascending=False).iloc[0,1]*100) == 64\n","assert ranking.sort_values(by='similarity', ascending=False).iloc[1,0] == '金融市場と公共政策'\n","assert int(ranking.sort_values(by='similarity', ascending=False).iloc[1,1]*100) == 48"],"execution_count":68,"outputs":[]},{"cell_type":"code","metadata":{"id":"R5YR-YYg8MCo"},"source":[""],"execution_count":null,"outputs":[]}]}