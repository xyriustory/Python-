{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"colab":{"name":"ex3.ipynb のコピー","provenance":[{"file_id":"https://github.com/UTDataMining/2020A/blob/master/ex3/ex3.ipynb","timestamp":1603093335448}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"JeBcTKuhzYkK"},"source":["# 課題3 データの前処理と可視化\n","\n","配点\n","- Q1, 1P\n","- Q2, 4P\n","- Q3, 1P\n","- Q4, 1P\n","- Q5, 3P "]},{"cell_type":"code","metadata":{"id":"mqs_mm1ZzYkL","executionInfo":{"status":"ok","timestamp":1603699748628,"user_tz":-540,"elapsed":591,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["# 必要なモジュールの読み込み\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"52miW-jFzYkS"},"source":["## Q1 欠損値の処理\n","### 欠損値の検出\n","pandasのシリーズやデータフレームではデータに欠損値（例えば数値データ内の空値）が含まれる場合、欠損値が`NaN`となります。以下では欠損値（空値）を含む得点データのcsvファイル, 'score_missing.csv', を読み込み、データフレーム`score`を作成します。"]},{"cell_type":"code","metadata":{"id":"dnesNEv2zYkT","executionInfo":{"status":"ok","timestamp":1603699750994,"user_tz":-540,"elapsed":595,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"507973cd-1952-4708-e135-1fd42059fdbb","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["# Colaboratoryでは以下を実行して必要なファイルをダウンロード\n","!wget https://raw.githubusercontent.com/UTDataMining/2020A/master/ex3/score_missing.csv"],"execution_count":2,"outputs":[{"output_type":"stream","text":["--2020-10-26 08:09:10--  https://raw.githubusercontent.com/UTDataMining/2020A/master/ex3/score_missing.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 141 [text/plain]\n","Saving to: ‘score_missing.csv’\n","\n","\rscore_missing.csv     0%[                    ]       0  --.-KB/s               \rscore_missing.csv   100%[===================>]     141  --.-KB/s    in 0s      \n","\n","2020-10-26 08:09:10 (6.16 MB/s) - ‘score_missing.csv’ saved [141/141]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mbpHe0WSzYkW","executionInfo":{"status":"ok","timestamp":1603699756685,"user_tz":-540,"elapsed":651,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"ef0e1d67-8545-41e6-e1ff-bd91db16c052","colab":{"base_uri":"https://localhost:8080/","height":359}},"source":["score = pd.read_csv('score_missing.csv')\n","score"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>30.0</td>\n","      <td>43.0</td>\n","      <td>51</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>39.0</td>\n","      <td>21.0</td>\n","      <td>50</td>\n","      <td>56.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>23</td>\n","      <td>57.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>29.0</td>\n","      <td>87.0</td>\n","      <td>77</td>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>70.0</td>\n","      <td>71.0</td>\n","      <td>78</td>\n","      <td>67.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>66.0</td>\n","      <td>NaN</td>\n","      <td>53</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>29.0</td>\n","      <td>26.0</td>\n","      <td>44</td>\n","      <td>52.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>NaN</td>\n","      <td>54.0</td>\n","      <td>37</td>\n","      <td>59.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>45.0</td>\n","      <td>NaN</td>\n","      <td>7</td>\n","      <td>44.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>68.0</td>\n","      <td>41.0</td>\n","      <td>29</td>\n","      <td>81.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   kokugo  shakai  sugaku   rika\n","0    30.0    43.0      51    NaN\n","1    39.0    21.0      50   56.0\n","2     NaN     NaN      23   57.0\n","3    29.0    87.0      77  100.0\n","4    70.0    71.0      78   67.0\n","5    66.0     NaN      53    NaN\n","6    29.0    26.0      44   52.0\n","7     NaN    54.0      37   59.0\n","8    45.0     NaN       7   44.0\n","9    68.0    41.0      29   81.0"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"jTBrrTT2zYka"},"source":["データフレームに欠損値が含まれるかどうかはpandasの`isnull()`メソッドを使うと調べることができます。`isnull()`メソッドはデータフレームの各要素の値について、欠損値であれば`True`、欠損値でなければ`False`を要素としたデータフレームを返します。\n","\n","`isnull()`メソッドの詳細は以下を参照してください。\n","\n","[isnull()](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.isnull.html#pandas.isnull)"]},{"cell_type":"code","metadata":{"id":"rYwiFIWBzYka","executionInfo":{"status":"ok","timestamp":1603699779510,"user_tz":-540,"elapsed":595,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"8a38d466-283e-4a15-ead4-a54301202eea","colab":{"base_uri":"https://localhost:8080/","height":359}},"source":["score.isnull()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   kokugo  shakai  sugaku   rika\n","0   False   False   False   True\n","1   False   False   False  False\n","2    True    True   False  False\n","3   False   False   False  False\n","4   False   False   False  False\n","5   False    True   False   True\n","6   False   False   False  False\n","7    True   False   False  False\n","8   False    True   False  False\n","9   False   False   False  False"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"lmc3Gqy0zYkd"},"source":["`isnull()`メソッドで返された上記のデータフレームの`any()`メソッド使うと、データフレームにおいて欠損値を含む行または列を調べることができます。以下では、列ごとに欠損値を含むかどうかを示すシリーズオブジェクトを返します。"]},{"cell_type":"code","metadata":{"id":"OwzZVm5LzYkd","executionInfo":{"status":"ok","timestamp":1603699812861,"user_tz":-540,"elapsed":605,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"aafce0fa-67d7-4db8-a62f-b025985cfba7","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["# 列ごとに欠損値があるか調べる\n","score.isnull().any()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["kokugo     True\n","shakai     True\n","sugaku    False\n","rika       True\n","dtype: bool"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"lKr2qXAnzYkf"},"source":["上記で`any()メソッド`の引数`axix`を1とすると、行ごとに欠損値を含むかどうかを示すシリーズオブジェクトを返します。"]},{"cell_type":"code","metadata":{"id":"5HS-UibGzYkf","executionInfo":{"status":"ok","timestamp":1603699814726,"user_tz":-540,"elapsed":523,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"cb885ff8-9925-4fad-f6e2-6f7bfa40ae16","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["# 行ごとに欠損値があるか調べる\n","score.isnull().any(axis=1)"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0     True\n","1    False\n","2     True\n","3    False\n","4    False\n","5     True\n","6    False\n","7     True\n","8     True\n","9    False\n","dtype: bool"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"SXHvIC59zYkh"},"source":["上記のシリーズオブジェクトを以下のようデータフレーム抽出の条件として用いると、元のデータフレームから欠損値を含む行または列からなるデータフレームを抽出できます。"]},{"cell_type":"code","metadata":{"id":"w45U8aeWzYkh","executionInfo":{"status":"ok","timestamp":1603699841465,"user_tz":-540,"elapsed":569,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"e9a5e981-56b8-4562-b91e-3355d29423e5","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["# データフレームから欠損値を含む行を抽出\n","score[score.isnull().any(axis=1)]"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>30.0</td>\n","      <td>43.0</td>\n","      <td>51</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>23</td>\n","      <td>57.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>66.0</td>\n","      <td>NaN</td>\n","      <td>53</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>NaN</td>\n","      <td>54.0</td>\n","      <td>37</td>\n","      <td>59.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>45.0</td>\n","      <td>NaN</td>\n","      <td>7</td>\n","      <td>44.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   kokugo  shakai  sugaku  rika\n","0    30.0    43.0      51   NaN\n","2     NaN     NaN      23  57.0\n","5    66.0     NaN      53   NaN\n","7     NaN    54.0      37  59.0\n","8    45.0     NaN       7  44.0"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"O8N7kV2hzYki","executionInfo":{"status":"ok","timestamp":1603699843666,"user_tz":-540,"elapsed":548,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"e371eae8-6ee3-4cfb-9112-b79dff4a710f","colab":{"base_uri":"https://localhost:8080/","height":359}},"source":["# データフレームから欠損値を含む列を抽出\n","score.loc[:, score.isnull().any()]"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>30.0</td>\n","      <td>43.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>39.0</td>\n","      <td>21.0</td>\n","      <td>56.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>57.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>29.0</td>\n","      <td>87.0</td>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>70.0</td>\n","      <td>71.0</td>\n","      <td>67.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>66.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>29.0</td>\n","      <td>26.0</td>\n","      <td>52.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>NaN</td>\n","      <td>54.0</td>\n","      <td>59.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>45.0</td>\n","      <td>NaN</td>\n","      <td>44.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>68.0</td>\n","      <td>41.0</td>\n","      <td>81.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   kokugo  shakai   rika\n","0    30.0    43.0    NaN\n","1    39.0    21.0   56.0\n","2     NaN     NaN   57.0\n","3    29.0    87.0  100.0\n","4    70.0    71.0   67.0\n","5    66.0     NaN    NaN\n","6    29.0    26.0   52.0\n","7     NaN    54.0   59.0\n","8    45.0     NaN   44.0\n","9    68.0    41.0   81.0"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"uVlcArWszYkk"},"source":["### 欠損値の削除\n","pandasの`dropna()`メソッドを使うと欠損値を含む行を削除することができます。`dropna()`メソッドでは、この他にもさまざまな方法で欠損値を削除することができます。詳細は以下を参照してください。\n","\n","[dropna()](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html)"]},{"cell_type":"code","metadata":{"id":"T3a6u9fMzYkk","executionInfo":{"status":"ok","timestamp":1603699845727,"user_tz":-540,"elapsed":564,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"93e40503-80f2-471d-da30-34846821494c","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["score.dropna()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>39.0</td>\n","      <td>21.0</td>\n","      <td>50</td>\n","      <td>56.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>29.0</td>\n","      <td>87.0</td>\n","      <td>77</td>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>70.0</td>\n","      <td>71.0</td>\n","      <td>78</td>\n","      <td>67.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>29.0</td>\n","      <td>26.0</td>\n","      <td>44</td>\n","      <td>52.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>68.0</td>\n","      <td>41.0</td>\n","      <td>29</td>\n","      <td>81.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   kokugo  shakai  sugaku   rika\n","1    39.0    21.0      50   56.0\n","3    29.0    87.0      77  100.0\n","4    70.0    71.0      78   67.0\n","6    29.0    26.0      44   52.0\n","9    68.0    41.0      29   81.0"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"LAYgr9uGzYkm"},"source":["### 欠損値の補完\n","pandasの`fillna()`メソッドを使うと欠損値を補完することができます。以下では、欠損値が含まれる列の欠損がない要素の値の平均値でその列にある欠損値を補完しています。`fillna()`メソッドでは、この他にもさまざまな方法で欠損値を補完することができます。詳細は以下を参照してください。\n","\n","[fillna()](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html)"]},{"cell_type":"code","metadata":{"id":"b4uJsd-MzYkm","executionInfo":{"status":"ok","timestamp":1603699849298,"user_tz":-540,"elapsed":514,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"1e20ba23-964e-4de5-bd58-1d744ce1409d","colab":{"base_uri":"https://localhost:8080/","height":359}},"source":["score = pd.read_csv('score_missing.csv')\n","score.fillna(score.mean())"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>30.0</td>\n","      <td>43.0</td>\n","      <td>51</td>\n","      <td>64.5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>39.0</td>\n","      <td>21.0</td>\n","      <td>50</td>\n","      <td>56.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>47.0</td>\n","      <td>49.0</td>\n","      <td>23</td>\n","      <td>57.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>29.0</td>\n","      <td>87.0</td>\n","      <td>77</td>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>70.0</td>\n","      <td>71.0</td>\n","      <td>78</td>\n","      <td>67.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>66.0</td>\n","      <td>49.0</td>\n","      <td>53</td>\n","      <td>64.5</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>29.0</td>\n","      <td>26.0</td>\n","      <td>44</td>\n","      <td>52.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>47.0</td>\n","      <td>54.0</td>\n","      <td>37</td>\n","      <td>59.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>45.0</td>\n","      <td>49.0</td>\n","      <td>7</td>\n","      <td>44.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>68.0</td>\n","      <td>41.0</td>\n","      <td>29</td>\n","      <td>81.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   kokugo  shakai  sugaku   rika\n","0    30.0    43.0      51   64.5\n","1    39.0    21.0      50   56.0\n","2    47.0    49.0      23   57.0\n","3    29.0    87.0      77  100.0\n","4    70.0    71.0      78   67.0\n","5    66.0    49.0      53   64.5\n","6    29.0    26.0      44   52.0\n","7    47.0    54.0      37   59.0\n","8    45.0    49.0       7   44.0\n","9    68.0    41.0      29   81.0"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"D480m_vQzYkn"},"source":["## Q1\n","欠損値（空値）を含む得点データのcsvファイル, 'score_missing.csv', を読み込み作成したデータフレームを受け取り、各列の欠損値をその列の欠損がない要素の値の中央値で補完したデータフレームを返す`fill_median()`関数を完成させてください。"]},{"cell_type":"code","metadata":{"id":"Ptv22XPczYko","executionInfo":{"status":"ok","timestamp":1603699853401,"user_tz":-540,"elapsed":560,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"ffb882d8-470c-4247-9da1-5dc21b85fcf2","colab":{"base_uri":"https://localhost:8080/","height":359}},"source":["score = pd.read_csv('score_missing.csv') # csvファイル読み込み\n","def fill_median(df):\n","    return df.fillna(df.median())### データフレームの各列の欠損値をその列の中央値で補完するコード ###\n","fill_median(score) # 関数呼び出して補完されたデータフレームを表示"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>30.0</td>\n","      <td>43.0</td>\n","      <td>51</td>\n","      <td>58.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>39.0</td>\n","      <td>21.0</td>\n","      <td>50</td>\n","      <td>56.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>42.0</td>\n","      <td>43.0</td>\n","      <td>23</td>\n","      <td>57.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>29.0</td>\n","      <td>87.0</td>\n","      <td>77</td>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>70.0</td>\n","      <td>71.0</td>\n","      <td>78</td>\n","      <td>67.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>66.0</td>\n","      <td>43.0</td>\n","      <td>53</td>\n","      <td>58.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>29.0</td>\n","      <td>26.0</td>\n","      <td>44</td>\n","      <td>52.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>42.0</td>\n","      <td>54.0</td>\n","      <td>37</td>\n","      <td>59.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>45.0</td>\n","      <td>43.0</td>\n","      <td>7</td>\n","      <td>44.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>68.0</td>\n","      <td>41.0</td>\n","      <td>29</td>\n","      <td>81.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   kokugo  shakai  sugaku   rika\n","0    30.0    43.0      51   58.0\n","1    39.0    21.0      50   56.0\n","2    42.0    43.0      23   57.0\n","3    29.0    87.0      77  100.0\n","4    70.0    71.0      78   67.0\n","5    66.0    43.0      53   58.0\n","6    29.0    26.0      44   52.0\n","7    42.0    54.0      37   59.0\n","8    45.0    43.0       7   44.0\n","9    68.0    41.0      29   81.0"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"kgV_-p8CzYkp"},"source":["`fill_median()`関数が完成したら、以下のセルを実行してデータフレームのすべての要素の和を求めることで動作を確認してください。すべての要素の和は`2013`となります。"]},{"cell_type":"code","metadata":{"id":"Uw_kbXQbzYkp","executionInfo":{"status":"ok","timestamp":1603699857566,"user_tz":-540,"elapsed":527,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"14f6769b-7b76-4eee-b339-e4305ac01919","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["fill_median(score).sum().sum()"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2013.0"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"9cEP6-cCzYkq","executionInfo":{"status":"ok","timestamp":1603699860071,"user_tz":-540,"elapsed":519,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["assert 2013 == fill_median(score).sum().sum()"],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fHM8SY87zYks"},"source":["## Q2 外れ値の処理\n","### NumPyでの記述統計\n","以下では、次のような形式の\"exam_score.csv\"ファイルを読み込み、NumPyの配列を作成し、NumPyの関数または`ndarray`オブジェクトのメソッドを用いて、配列の記述統計を求めています。\n","```Python\n","## exam_score.csvファイル\n","kokugo, shakai, sugaku, rika\n","30, 43, 51, 63\n","39, 21, 49, 56\n","...\n","```"]},{"cell_type":"code","metadata":{"id":"RAj0o-E6zYks","executionInfo":{"status":"ok","timestamp":1603699876672,"user_tz":-540,"elapsed":735,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"fa40aa71-4c56-43a6-ec49-951a1e52d789","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["# Colaboratoryでは以下を実行して必要なファイルをダウンロード\n","!wget https://raw.githubusercontent.com/UTDataMining/2020A/master/ex3/exam_score.csv"],"execution_count":16,"outputs":[{"output_type":"stream","text":["--2020-10-26 08:11:16--  https://raw.githubusercontent.com/UTDataMining/2020A/master/ex3/exam_score.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 1991 (1.9K) [text/plain]\n","Saving to: ‘exam_score.csv’\n","\n","\rexam_score.csv        0%[                    ]       0  --.-KB/s               \rexam_score.csv      100%[===================>]   1.94K  --.-KB/s    in 0s      \n","\n","2020-10-26 08:11:16 (36.9 MB/s) - ‘exam_score.csv’ saved [1991/1991]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"146W84hfzYku","executionInfo":{"status":"ok","timestamp":1603699878785,"user_tz":-540,"elapsed":514,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"85dc31b4-da32-437a-8bb1-b8dbbed2b50d","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# csvファイルからNumPy配列の作成\n","score = np.loadtxt(\"exam_score.csv\", delimiter=\",\", skiprows=1)\n","score"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 30.,  43.,  51.,  63.],\n","       [ 39.,  21.,  49.,  56.],\n","       [ 29.,  30.,  23.,  57.],\n","       [ 95.,  87.,  77., 100.],\n","       [ 70.,  71.,  78.,  67.],\n","       [ 67.,  53.,  56.,  61.],\n","       [ 29.,  26.,  44.,  52.],\n","       [ 56.,  54.,  37.,  59.],\n","       [ 45.,  21.,   7.,  44.],\n","       [ 68.,  41.,  29.,  81.],\n","       [ 50.,  43.,  80.,  73.],\n","       [ 70.,  61.,  61.,  71.],\n","       [ 46.,  37.,  36.,  56.],\n","       [ 23.,  24.,  20.,  36.],\n","       [ 77.,  54.,  58.,  84.],\n","       [ 15.,   8.,  22.,  29.],\n","       [ 37.,  23.,  23.,  32.],\n","       [ 55.,  42.,  85.,  86.],\n","       [  0.,   5.,   0.,  24.],\n","       [ 35.,  48.,  24.,  42.],\n","       [ 60.,  80.,  64.,  72.],\n","       [ 70.,  52.,  75.,  60.],\n","       [ 82.,  84.,  86.,  88.],\n","       [ 44.,  22.,  18.,  13.],\n","       [ 54.,  14.,  33.,  43.],\n","       [ 80.,  63.,  59.,  73.],\n","       [ 46.,  47.,  72.,  56.],\n","       [ 48.,  63.,  72.,  83.],\n","       [ 51.,  41.,  63.,  60.],\n","       [ 37.,  18.,  38.,  51.],\n","       [ 31.,  29.,  28.,  36.],\n","       [ 35.,  52.,  40.,  65.],\n","       [ 50.,  41.,  50.,  64.],\n","       [ 33.,  28.,  65.,  43.],\n","       [ 27.,  20.,  17.,  29.],\n","       [ 36.,  27.,  62.,  58.],\n","       [ 77.,  70.,  91.,  72.],\n","       [ 61.,  49.,  71.,  71.],\n","       [ 84.,  90.,  87., 100.],\n","       [ 78.,  43.,  59.,  55.],\n","       [  7.,  17.,  18.,  27.],\n","       [ 57.,  32.,  36.,  55.],\n","       [ 60.,  60.,  85.,  66.],\n","       [ 17.,  19.,  25.,  28.],\n","       [ 82.,  86.,  75.,  84.],\n","       [ 37.,  36.,  45.,  41.],\n","       [ 40.,  27.,  35.,  45.],\n","       [ 72.,  73.,  94.,  96.],\n","       [ 74.,  63.,  79.,  69.],\n","       [ 87.,  85.,  84.,  93.],\n","       [ 66.,  34.,  57.,  50.],\n","       [ 90.,  68.,  64.,  78.],\n","       [ 43.,  19.,  29.,  35.],\n","       [ 24.,  15.,   1.,  17.],\n","       [ 41.,  34.,  28.,  43.],\n","       [ 42.,  16.,  29.,  43.],\n","       [ 33.,  23.,  48.,  53.],\n","       [ 29.,  15.,  20.,  21.],\n","       [ 83.,  83.,  58.,  71.],\n","       [ 73.,  81.,  94.,  85.],\n","       [ 66.,  23.,  78.,  41.],\n","       [ 71.,  38.,  80.,  61.],\n","       [ 62.,  57.,  91.,  83.],\n","       [ 47.,  51.,  69.,  80.],\n","       [ 53.,  33.,  50.,  38.],\n","       [ 61.,  33.,  50.,  49.],\n","       [ 21.,  20.,  39.,  21.],\n","       [ 74.,  66.,  65.,  78.],\n","       [ 72.,  68.,  42.,  66.],\n","       [ 50.,  44.,  47.,  56.],\n","       [  5.,  27.,  29.,  24.],\n","       [ 32.,  28.,  14.,  43.],\n","       [ 23.,  25.,  26.,  34.],\n","       [ 34.,  20.,  23.,  30.],\n","       [ 70.,  87.,  84.,  88.],\n","       [  9.,  25.,  23.,  33.],\n","       [ 61.,  37.,  39.,  55.],\n","       [ 34.,  40.,  36.,  33.],\n","       [ 38.,  31.,  33.,  31.],\n","       [ 72.,  41.,  36.,  44.],\n","       [ 32.,  28.,  32.,  41.],\n","       [ 52.,  29.,  32.,  36.],\n","       [ 96.,  76.,  90.,  77.],\n","       [ 58.,  31.,  46.,  46.],\n","       [ 35.,  23.,  17.,  38.],\n","       [ 40.,  38.,   7.,  21.],\n","       [ 48.,  23.,  41.,  40.],\n","       [ 46.,  53.,  34.,  30.],\n","       [ 32.,  21.,  24.,  28.],\n","       [ 50.,  28.,  29.,  31.],\n","       [ 76.,  63.,  74.,  72.],\n","       [ 64.,  40.,  30.,  49.],\n","       [ 62.,  43.,  14.,  48.],\n","       [ 76.,  42.,  58.,  51.],\n","       [ 81.,  50.,  61.,  63.],\n","       [ 69.,  49.,  30.,  34.],\n","       [ 89.,  83.,  73.,  81.],\n","       [ 27.,  29.,  34.,  40.],\n","       [ 39.,  24.,  26.,  24.],\n","       [ 62.,  39.,  42.,  40.],\n","       [ 73.,  74.,  74.,  61.],\n","       [ 49.,  18.,  27.,  20.],\n","       [ 35.,  18.,  28.,  25.],\n","       [ 36.,   4.,  15.,  43.],\n","       [ 16.,  16.,  25.,  22.],\n","       [ 60.,  48.,  67.,  29.],\n","       [ 74.,  60.,  57.,  78.],\n","       [ 22.,   9.,   6.,  26.],\n","       [ 47.,  21.,  26.,  25.],\n","       [ 43.,  32.,  74.,  55.],\n","       [ 84.,  51.,  76.,  84.],\n","       [ 65.,  43.,  38.,  70.],\n","       [ 49.,  26.,  62.,  50.],\n","       [ 31.,  14.,   8.,  16.],\n","       [ 83.,  54.,  44.,  45.],\n","       [ 87.,  86.,  77.,  78.],\n","       [ 68.,  59.,  60.,  63.],\n","       [ 68.,  53.,  41.,  57.],\n","       [ 28.,   4.,  37.,  29.],\n","       [ 42.,  29.,  33.,  48.],\n","       [ 42.,  31.,  47.,  44.],\n","       [ 70.,  57.,  60.,  61.],\n","       [ 58.,  62.,  40.,  66.],\n","       [ 57.,  40.,  43.,  28.],\n","       [  8.,  12.,   0.,  20.],\n","       [ 44.,  32.,  31.,  28.],\n","       [ 65.,  43.,  36.,  49.],\n","       [ 81.,  53.,  78.,  81.],\n","       [ 57.,  53.,  75.,  58.],\n","       [ 64.,  36.,  20.,  31.],\n","       [ 86.,  62.,  78.,  54.],\n","       [ 34.,  27.,  48.,  52.],\n","       [ 84.,  57.,  45.,  64.],\n","       [  4.,   9.,   5.,  11.],\n","       [ 23.,   9.,   5.,  26.],\n","       [ 66.,  43.,  54.,  72.],\n","       [ 53.,  23.,  28.,  30.],\n","       [ 70.,  41.,  44.,  34.],\n","       [ 78.,  53.,  45.,  54.],\n","       [ 39.,  19.,   5.,  32.],\n","       [ 74.,  62.,  44.,  58.],\n","       [ 33.,  33.,  32.,  42.],\n","       [ 43.,  24.,  29.,  47.],\n","       [ 54.,  21.,  43.,  28.],\n","       [ 26.,  15.,  13.,  19.],\n","       [ 58.,  17.,  34.,  19.],\n","       [ 29.,  15.,  37.,  19.],\n","       [ 73.,  60.,  59.,  54.],\n","       [ 59.,  25.,  45.,  48.],\n","       [ 58.,  17.,  31.,  23.],\n","       [ 70.,  56.,  76.,  62.],\n","       [ 19.,  12.,   9.,  28.],\n","       [ 29.,  21.,  26.,  30.],\n","       [ 32.,   7.,  14.,  18.],\n","       [ 77.,  64.,  87.,  71.],\n","       [ 91.,  69., 100.,  83.],\n","       [ 50.,  31.,  53.,  44.],\n","       [ 63.,  32.,  43.,  52.],\n","       [ 42.,  16.,  27.,  22.],\n","       [ 68.,  28.,  60.,  69.],\n","       [ 70.,  23.,  43.,  50.],\n","       [ 82.,  78.,  80.,  88.],\n","       [  0.,   8.,   2.,   9.],\n","       [ 45.,  26.,  29.,  24.],\n","       [ 73.,  31.,  43.,  32.],\n","       [ 60.,  85.,  89.,  80.]])"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"8rsPwqAjzYkv","executionInfo":{"status":"ok","timestamp":1603699884468,"user_tz":-540,"elapsed":951,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"48ecb89a-4ac3-431a-e0d5-3d9854470cb1","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["# NumPyの関数で配列の各列の平均、分散、中央値、最大、最小を求める\n","print(np.mean(score, axis=0)) # 平均\n","print(np.var(score, axis=0)) # 分散\n","print(np.median(score, axis=0)) # 中央値\n","print(np.amax(score, axis=0)) # 最大値\n","print(np.amin(score, axis=0)) # 最小値"],"execution_count":18,"outputs":[{"output_type":"stream","text":["[52.3313253  39.60240964 45.61445783 49.88554217]\n","[473.93239222 457.60095805 583.85135724 455.54714037]\n","[53. 35. 43. 49.]\n","[ 96.  90. 100. 100.]\n","[0. 4. 0. 9.]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BteAcSelzYkw","executionInfo":{"status":"ok","timestamp":1603699884469,"user_tz":-540,"elapsed":691,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"e7f54432-b87c-4120-d318-aa7a383ecad0","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["# ndarrayのメソッドで配列の各列の平均、分散、最大、最小を求める\n","print(score.mean(axis=0)) # 平均\n","print(score.var(axis=0)) # 分散\n","print(score.max(axis=0)) # 最大値\n","print(score.min(axis=0)) # 最小値"],"execution_count":19,"outputs":[{"output_type":"stream","text":["[52.3313253  39.60240964 45.61445783 49.88554217]\n","[473.93239222 457.60095805 583.85135724 455.54714037]\n","[ 96.  90. 100. 100.]\n","[0. 4. 0. 9.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nfiUm_JYzYkx"},"source":["### Q2.1\n","整数を要素とする任意の長さの1次元配列を入力として受け取り、配列の要素の値の中で、以下の外れ値の基準にあてはまる要素からなる1次元配列を返す`find_outliers()`関数を完成させてください。なお、IQRは四分位範囲であり、第3四分位から第1四分位を引いた値です。\n","- （第1四分位-1.5IQR）を値の下限としてそれより小さい値は外れ値とする\n","- （第3四分位+1.5IQR）を値の上限としてそれより大きい値は外れ値とする\n","\n","配列の第1四分位と第3四分位は、NumPyの`percentile()`関数を用いて以下のように求められる。\n","```Python\n","第1四分位, 第3四分位=np.percentile(配列, [25, 75])\n","```"]},{"cell_type":"code","metadata":{"id":"rngAQeUezYkx","executionInfo":{"status":"ok","timestamp":1603699885341,"user_tz":-540,"elapsed":343,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["def find_outliers(input_array):\n","    q1, q3 = np.percentile(input_array,[25,75]) ### 入力の第1四分位q1, 第3四分位q3を求めるコード ###\n","    iqr = q3 - q1 ### 四分位範囲を求めるコード ###\n","    lower = q1 - 1.5*iqr ### 下限値を求めるコード ###\n","    upper = q3 + 1.5*iqr ### 上限値を求めるコード ###\n","    return  input_array[(input_array < lower) | (input_array > upper)]### 下限より小さい値と上限より大きい値を外れ値としてそれらを要素する配列を抽出するコード ###"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Gz8sbRxJzYkz"},"source":["`find_outliers()`関数が完成したら、以下のセルを実行して動作を確認してください。`[-100, 200, 1000]`が外れ値の配列です。"]},{"cell_type":"code","metadata":{"id":"ZQ-4cpMtzYkz","executionInfo":{"status":"ok","timestamp":1603699915249,"user_tz":-540,"elapsed":612,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"080d7091-70a5-44cb-d0d1-df11a97ce95b","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["find_outliers(np.array([30,39,-100,29,95,70,67,200,29,1000,56,45,68]))"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-100,  200, 1000])"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"urd6jChczYk0","executionInfo":{"status":"ok","timestamp":1603699933032,"user_tz":-540,"elapsed":535,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["assert set([-100,200,1000]) == set(find_outliers(np.array([30,39,-100,29,95,70,67,200,29,1000,56,45,68])))"],"execution_count":22,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"W66cNCCLzYk1"},"source":["### Q2.2\n","以下のような形式の\"score_outlier.csv\"ファイルを読み込み、データフレーム`score`を作成します。\n","```Python\n","## score_outlier.csvファイル\n","kokugo, shakai, sugaku, rika\n","30, 43, 51, 63\n","39, 21, 49, 56\n","...\n","```\n","`score`を受け取り、各列ごとに、Q2.1と同様に四分位範囲, 第3四分位, 第1四分位を用いて外れ値を検出し、外れ値を含む行を除いたデータフレームを返す関数`drop_outliers()`を完成させてください。データフレームの各列の第1四分位と第3四分位は、pandasの`quantile()`メソッドを用いて以下のように求められる。\n","```Python\n","第1四分位 = データフレーム[列名].quantile(0.25)\n","第3四分位 = データフレーム[列名].quantile(0.75)\n","```"]},{"cell_type":"code","metadata":{"id":"-nsbzSTBzYk1","executionInfo":{"status":"ok","timestamp":1603700005306,"user_tz":-540,"elapsed":750,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"fc3178de-f4b4-4838-ccea-9ef29bdbd42c","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["# Colaboratoryでは以下を実行して必要なファイルをダウンロード\n","!wget https://raw.githubusercontent.com/UTDataMining/2020A/master/ex3/score_outlier.csv"],"execution_count":23,"outputs":[{"output_type":"stream","text":["--2020-10-26 08:13:24--  https://raw.githubusercontent.com/UTDataMining/2020A/master/ex3/score_outlier.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2170 (2.1K) [text/plain]\n","Saving to: ‘score_outlier.csv’\n","\n","\rscore_outlier.csv     0%[                    ]       0  --.-KB/s               \rscore_outlier.csv   100%[===================>]   2.12K  --.-KB/s    in 0s      \n","\n","2020-10-26 08:13:24 (36.4 MB/s) - ‘score_outlier.csv’ saved [2170/2170]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bvhuZneRzYk3","executionInfo":{"status":"ok","timestamp":1603700671770,"user_tz":-540,"elapsed":576,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"0309f557-5fef-4c96-bafe-f7bcf9a49282","colab":{"base_uri":"https://localhost:8080/","height":359}},"source":["score = pd.read_csv('score_outlier.csv') # csvファイル読み込み\n","#print(score)\n","def drop_outliers(df):\n","  for sub in df:\n","    q1 = df[sub].quantile(0.25) ### 入力の第1四分位q1を求めるコード ###\n","    q3 = df[sub].quantile(0.75) ### 入力の第3四分位q3を求めるコード ###\n","    iqr = q3 - q1 ### 四分位範囲を求めるコード ###\n","    lower = q1 - 1.5*iqr ### 下限値を求めるコード ###\n","    upper = q3 + 1.5*iqr ### 上限値を求めるコード ###\n","    df = df[(lower<=df[sub]) & (df[sub]<=upper)]  \n","  return df### 各列がその列の下限値以上かつ上限以内の値であるデータフレーム ###\n","\n","drop_outliers(score).head(10)  # 関数呼び出して外れた値を含む行を除いたデータフレームを表示"],"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>30</td>\n","      <td>43</td>\n","      <td>51</td>\n","      <td>63</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>39</td>\n","      <td>21</td>\n","      <td>49</td>\n","      <td>56</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>29</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>57</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>95</td>\n","      <td>87</td>\n","      <td>77</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>70</td>\n","      <td>71</td>\n","      <td>78</td>\n","      <td>67</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>67</td>\n","      <td>53</td>\n","      <td>56</td>\n","      <td>61</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>29</td>\n","      <td>26</td>\n","      <td>44</td>\n","      <td>52</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>56</td>\n","      <td>54</td>\n","      <td>37</td>\n","      <td>59</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>45</td>\n","      <td>21</td>\n","      <td>7</td>\n","      <td>44</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>68</td>\n","      <td>41</td>\n","      <td>29</td>\n","      <td>81</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   kokugo  shakai  sugaku  rika\n","0      30      43      51    63\n","1      39      21      49    56\n","2      29      30      23    57\n","3      95      87      77   100\n","4      70      71      78    67\n","5      67      53      56    61\n","6      29      26      44    52\n","7      56      54      37    59\n","8      45      21       7    44\n","9      68      41      29    81"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"markdown","metadata":{"id":"-ag36Lq_zYk4"},"source":["`drop_outliers()`関数が完成したら、以下のセルを実行して外れ値を含む行を除いたデータフレームの行数を求めることで動作を確認してください。行数は`155`となります。"]},{"cell_type":"code","metadata":{"id":"UxZDwBmdzYk4","executionInfo":{"status":"ok","timestamp":1603700112632,"user_tz":-540,"elapsed":504,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"e2f76eee-0ef2-4a65-8a1d-bdbfeb5a21b0","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(drop_outliers(score).index)"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["155"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"bUcv_m9czYk6","executionInfo":{"status":"ok","timestamp":1603700113850,"user_tz":-540,"elapsed":569,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["assert 155 == len(drop_outliers(score).index)"],"execution_count":27,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EYdLWDJozYk7"},"source":["### Q2.3\n","`matplotlib`では、以下のようにして複数の1次配列を入力として、それぞれを箱ひげ図として同時に可視化することができます。\n","```Python\n","plt.boxplot([配列1, 配列2, 配列3, ....], showmeans=True);\n","```\n","\"score_outlier.csv\"ファイルを読み込み、NumPyの配列を作成し、各教科の点数の箱ひげ図を可視化してください。"]},{"cell_type":"code","metadata":{"id":"o31xaGEfzYk7","executionInfo":{"status":"ok","timestamp":1603700178205,"user_tz":-540,"elapsed":550,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"34b8ac0a-2237-4532-e73f-134402b91fa4","colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["# csvファイルからNumPy配列の作成\n","score = np.loadtxt(\"score_outlier.csv\", delimiter=\",\", skiprows=1)\n","plt.boxplot([score[:,0],score[:,1],score[:,2],score[:,3]], showmeans=True);"],"execution_count":29,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"thHOfsNWzYk8"},"source":["## Q3 標準化\n","以下のような形式の\"exam_score.csv\"ファイルを読み込み、作成したNumPyの配列を受け取り、各教科の点数をその教科の平均値と分散を用いて標準化した配列を返す`normalize_score()`関数を完成させてください。平均値と分散の計算には、NumPyの関数またはndarrayオブジェクトのメソッド、どちらを使ってもよいです。また、分散は標本分散としてください。\n","```Python\n","## exam_score.csvファイル\n","kokugo, shakai, sugaku, rika\n","30, 43, 51, 63\n","39, 21, 49, 56\n","...\n","```\n","\n","配列の列ごとに関数やメソッドを適用するには以下のように`axis`引数を0とする。\n","```Python\n","np.mean(配列, axis=0)\n","配列.mean(axis=0)\n","```\n","また、配列の元の次元を保持したい場合は`keepdims`引数をTrueとする。\n","```Python\n","np.mean(配列, axis=0, keepdims=True)\n","配列.mean(axis=0, keepdims=True)\n","```"]},{"cell_type":"code","metadata":{"id":"4Uvp4twPzYk8","executionInfo":{"status":"ok","timestamp":1603700427417,"user_tz":-540,"elapsed":641,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"6cae30af-6e12-49f0-8d83-698e7454d1d6","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# csvファイルからNumPy配列の作成\n","score = np.loadtxt(\"exam_score.csv\", delimiter=\",\", skiprows=1)\n","def normalize_score(a):\n","  for i in range(4):\n","    a[:,i] = (a[:,i] - np.mean(a[:,i]))/ np.sqrt(a[:,i].var(axis=0))\n","  return a### 配列aの各列をその列の平均値と分散を用いて標準化した配列を求めるコード ###\n","normalize_score(score) # 関数呼び出して標準化された配列を表示"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-1.0257849 ,  0.15882818,  0.22288369,  0.61444594],\n","       [-0.61237172, -0.86961243,  0.14011256,  0.28647801],\n","       [-1.0717197 , -0.44888673, -0.93591204,  0.33333057],\n","       [ 1.95997692,  2.2157094 ,  1.29890829,  2.34799071],\n","       [ 0.81160699,  1.46775259,  1.34029385,  0.80185618],\n","       [ 0.6738026 ,  0.62630118,  0.4298115 ,  0.52074082],\n","       [-1.0717197 , -0.63587593, -0.06681524,  0.09906777],\n","       [ 0.16851983,  0.67304848, -0.35651418,  0.42703569],\n","       [-0.33676294, -0.86961243, -1.59808102, -0.27575273],\n","       [ 0.7197374 ,  0.06533358, -0.68759867,  1.45779204],\n","       [-0.10708895,  0.15882818,  1.42306497,  1.08297155],\n","       [ 0.81160699,  1.00027959,  0.6367393 ,  0.98926643],\n","       [-0.29082814, -0.12165563, -0.39789974,  0.28647801],\n","       [-1.34732848, -0.72937053, -1.06006872, -0.65057322],\n","       [ 1.13315057,  0.67304848,  0.51258262,  1.59834973],\n","       [-1.71480686, -1.47732734, -0.9772976 , -0.97854114],\n","       [-0.70424132, -0.77611783, -0.93591204, -0.83798346],\n","       [ 0.12258503,  0.11208088,  1.62999278,  1.69205485],\n","       [-2.40382882, -1.61756924, -1.88777995, -1.21280395],\n","       [-0.79611091,  0.39256468, -0.89452648, -0.36945785],\n","       [ 0.35225902,  1.8884783 ,  0.76089599,  1.03611899],\n","       [ 0.81160699,  0.57955388,  1.21613717,  0.47388826],\n","       [ 1.36282456,  2.0754675 ,  1.67137834,  1.78575997],\n","       [-0.38269774, -0.82286513, -1.14283985, -1.72818213],\n","       [ 0.07665023, -1.19684354, -0.52205642, -0.32260529],\n","       [ 1.27095496,  1.09377419,  0.55396818,  1.08297155],\n","       [-0.29082814,  0.34581738,  1.09198048,  0.28647801],\n","       [-0.19895855,  1.09377419,  1.09198048,  1.55149717],\n","       [-0.06115416,  0.06533358,  0.71951043,  0.47388826],\n","       [-0.70424132, -1.00985434, -0.31512861,  0.0522152 ],\n","       [-0.9798501 , -0.49563403, -0.72898423, -0.65057322],\n","       [-0.79611091,  0.57955388, -0.23235749,  0.70815106],\n","       [-0.10708895,  0.06533358,  0.18149813,  0.6612985 ],\n","       [-0.88798051, -0.54238133,  0.80228155, -0.32260529],\n","       [-1.16358929, -0.91635974, -1.18422541, -0.97854114],\n","       [-0.75017612, -0.58912863,  0.67812486,  0.38018313],\n","       [ 1.13315057,  1.42100529,  1.87830615,  1.03611899],\n","       [ 0.39819381,  0.43931198,  1.05059492,  0.98926643],\n","       [ 1.45469415,  2.3559513 ,  1.7127639 ,  2.34799071],\n","       [ 1.17908537,  0.15882818,  0.55396818,  0.23962545],\n","       [-2.08228524, -1.05660164, -1.14283985, -1.07224627],\n","       [ 0.21445463, -0.35539213, -0.39789974,  0.23962545],\n","       [ 0.35225902,  0.95353229,  1.62999278,  0.75500362],\n","       [-1.62293726, -0.96310704, -0.85314091, -1.02539371],\n","       [ 1.36282456,  2.1689621 ,  1.21613717,  1.59834973],\n","       [-0.70424132, -0.16840293, -0.02542968, -0.41631041],\n","       [-0.56643693, -0.58912863, -0.4392853 , -0.22890016],\n","       [ 0.90347658,  1.56124719,  2.00246284,  2.16058046],\n","       [ 0.99534618,  1.09377419,  1.38167941,  0.89556131],\n","       [ 1.59249854,  2.1222148 ,  1.58860722,  2.02002278],\n","       [ 0.6278678 , -0.26189753,  0.47119706,  0.00536264],\n","       [ 1.73030293,  1.32751069,  0.76089599,  1.31723436],\n","       [-0.42863254, -0.96310704, -0.68759867, -0.69742578],\n","       [-1.30139368, -1.15009624, -1.84639439, -1.54077188],\n","       [-0.52050213, -0.26189753, -0.72898423, -0.32260529],\n","       [-0.47456733, -1.10334894, -0.68759867, -0.32260529],\n","       [-0.88798051, -0.77611783,  0.098727  ,  0.14592033],\n","       [-1.0717197 , -1.15009624, -1.06006872, -1.35336164],\n","       [ 1.40875935,  2.0287202 ,  0.51258262,  0.98926643],\n","       [ 0.94941138,  1.9352256 ,  2.00246284,  1.64520229],\n","       [ 0.6278678 , -0.77611783,  1.34029385, -0.41631041],\n","       [ 0.85754179, -0.07490833,  1.42306497,  0.52074082],\n","       [ 0.44412861,  0.81329039,  1.87830615,  1.55149717],\n","       [-0.24489335,  0.53280658,  0.9678238 ,  1.41093948],\n","       [ 0.03071544, -0.30864483,  0.18149813, -0.55686809],\n","       [ 0.39819381, -0.30864483,  0.18149813, -0.04148992],\n","       [-1.43919807, -0.91635974, -0.27374305, -1.35336164],\n","       [ 0.99534618,  1.23401609,  0.80228155,  1.31723436],\n","       [ 0.90347658,  1.32751069, -0.14958637,  0.75500362],\n","       [-0.10708895,  0.20557548,  0.05734144,  0.28647801],\n","       [-2.17415483, -0.58912863, -0.68759867, -1.21280395],\n","       [-0.93391531, -0.54238133, -1.30838209, -0.32260529],\n","       [-1.34732848, -0.68262323, -0.81175535, -0.74427834],\n","       [-0.84204571, -0.91635974, -0.93591204, -0.93168858],\n","       [ 0.81160699,  2.2157094 ,  1.58860722,  1.78575997],\n","       [-1.99041564, -0.68262323, -0.93591204, -0.7911309 ],\n","       [ 0.39819381, -0.12165563, -0.27374305,  0.23962545],\n","       [-0.84204571,  0.01858628, -0.39789974, -0.7911309 ],\n","       [-0.65830652, -0.40213943, -0.52205642, -0.88483602],\n","       [ 0.90347658,  0.06533358, -0.39789974, -0.27575273],\n","       [-0.93391531, -0.54238133, -0.56344198, -0.41631041],\n","       [-0.01521936, -0.49563403, -0.56344198, -0.65057322],\n","       [ 2.00591172,  1.7014891 ,  1.83692059,  1.2703818 ],\n","       [ 0.26038942, -0.40213943,  0.01595588, -0.1820476 ],\n","       [-0.79611091, -0.77611783, -1.18422541, -0.55686809],\n","       [-0.56643693, -0.07490833, -1.59808102, -1.35336164],\n","       [-0.19895855, -0.77611783, -0.19097193, -0.46316297],\n","       [-0.29082814,  0.62630118, -0.48067086, -0.93168858],\n","       [-0.93391531, -0.86961243, -0.89452648, -1.02539371],\n","       [-0.10708895, -0.54238133, -0.68759867, -0.88483602],\n","       [ 1.08721577,  1.09377419,  1.1747516 ,  1.03611899],\n","       [ 0.53599821,  0.01858628, -0.64621311, -0.04148992],\n","       [ 0.44412861,  0.15882818, -1.30838209, -0.08834248],\n","       [ 1.08721577,  0.11208088,  0.51258262,  0.0522152 ],\n","       [ 1.31688976,  0.48605928,  0.6367393 ,  0.61444594],\n","       [ 0.76567219,  0.43931198, -0.64621311, -0.74427834],\n","       [ 1.68436814,  2.0287202 ,  1.13336604,  1.45779204],\n","       [-1.16358929, -0.49563403, -0.48067086, -0.46316297],\n","       [-0.61237172, -0.72937053, -0.81175535, -1.21280395],\n","       [ 0.44412861, -0.02816102, -0.14958637, -0.46316297],\n","       [ 0.94941138,  1.6079945 ,  1.1747516 ,  0.52074082],\n","       [-0.15302375, -1.00985434, -0.77036979, -1.4002142 ],\n","       [-0.79611091, -1.00985434, -0.72898423, -1.16595139],\n","       [-0.75017612, -1.66431654, -1.26699653, -0.32260529],\n","       [-1.66887206, -1.10334894, -0.85314091, -1.30650907],\n","       [ 0.35225902,  0.39256468,  0.88505267, -0.97854114],\n","       [ 0.99534618,  0.95353229,  0.47119706,  1.31723436],\n","       [-1.39326328, -1.43058004, -1.63946658, -1.11909883],\n","       [-0.24489335, -0.86961243, -0.81175535, -1.16595139],\n","       [-0.42863254, -0.35539213,  1.1747516 ,  0.23962545],\n","       [ 1.45469415,  0.53280658,  1.25752273,  1.59834973],\n","       [ 0.581933  ,  0.15882818, -0.31512861,  0.94241387],\n","       [-0.15302375, -0.63587593,  0.67812486,  0.00536264],\n","       [-0.9798501 , -1.19684354, -1.55669546, -1.58762444],\n","       [ 1.40875935,  0.67304848, -0.06681524, -0.22890016],\n","       [ 1.59249854,  2.1689621 ,  1.29890829,  1.31723436],\n","       [ 0.7197374 ,  0.90678499,  0.59535374,  0.61444594],\n","       [ 0.7197374 ,  0.62630118, -0.19097193,  0.33333057],\n","       [-1.11765449, -1.66431654, -0.35651418, -0.97854114],\n","       [-0.47456733, -0.49563403, -0.52205642, -0.08834248],\n","       [-0.47456733, -0.40213943,  0.05734144, -0.27575273],\n","       [ 0.81160699,  0.81329039,  0.59535374,  0.52074082],\n","       [ 0.26038942,  1.04702689, -0.23235749,  0.75500362],\n","       [ 0.21445463,  0.01858628, -0.10820081, -1.02539371],\n","       [-2.03635044, -1.29033814, -1.88777995, -1.4002142 ],\n","       [-0.38269774, -0.35539213, -0.60482754, -1.02539371],\n","       [ 0.581933  ,  0.15882818, -0.39789974, -0.04148992],\n","       [ 1.31688976,  0.62630118,  1.34029385,  1.45779204],\n","       [ 0.21445463,  0.62630118,  1.21613717,  0.38018313],\n","       [ 0.53599821, -0.16840293, -1.06006872, -0.88483602],\n","       [ 1.54656375,  1.04702689,  1.34029385,  0.19277289],\n","       [-0.84204571, -0.58912863,  0.098727  ,  0.09906777],\n","       [ 1.45469415,  0.81329039, -0.02542968,  0.6612985 ],\n","       [-2.22008963, -1.43058004, -1.68085215, -1.82188725],\n","       [-1.34732848, -1.43058004, -1.68085215, -1.11909883],\n","       [ 0.6278678 ,  0.15882818,  0.34704037,  1.03611899],\n","       [ 0.03071544, -0.77611783, -0.72898423, -0.93168858],\n","       [ 0.81160699,  0.06533358, -0.06681524, -0.74427834],\n","       [ 1.17908537,  0.62630118, -0.02542968,  0.19277289],\n","       [-0.61237172, -0.96310704, -1.68085215, -0.83798346],\n","       [ 0.99534618,  1.04702689, -0.06681524,  0.38018313],\n","       [-0.88798051, -0.30864483, -0.56344198, -0.36945785],\n","       [-0.42863254, -0.72937053, -0.68759867, -0.13519504],\n","       [ 0.07665023, -0.86961243, -0.10820081, -1.02539371],\n","       [-1.20952409, -1.15009624, -1.34976765, -1.44706676],\n","       [ 0.26038942, -1.05660164, -0.48067086, -1.44706676],\n","       [-1.0717197 , -1.15009624, -0.35651418, -1.44706676],\n","       [ 0.94941138,  0.95353229,  0.55396818,  0.19277289],\n","       [ 0.30632422, -0.68262323, -0.02542968, -0.08834248],\n","       [ 0.26038942, -1.05660164, -0.60482754, -1.25965651],\n","       [ 0.81160699,  0.76654309,  1.25752273,  0.56759338],\n","       [-1.53106767, -1.29033814, -1.5153099 , -1.02539371],\n","       [-1.0717197 , -0.86961243, -0.81175535, -0.93168858],\n","       [-0.93391531, -1.52407464, -1.30838209, -1.49391932],\n","       [ 1.13315057,  1.14052149,  1.7127639 ,  0.98926643],\n","       [ 1.77623773,  1.37425799,  2.25077621,  1.55149717],\n","       [-0.10708895, -0.40213943,  0.30565481, -0.27575273],\n","       [ 0.49006341, -0.35539213, -0.10820081,  0.09906777],\n","       [-0.47456733, -1.10334894, -0.77036979, -1.30650907],\n","       [ 0.7197374 , -0.54238133,  0.59535374,  0.89556131],\n","       [ 0.81160699, -0.77611783, -0.10820081,  0.00536264],\n","       [ 1.36282456,  1.7949837 ,  1.42306497,  1.78575997],\n","       [-2.40382882, -1.47732734, -1.80500883, -1.91559237],\n","       [-0.33676294, -0.63587593, -0.68759867, -1.21280395],\n","       [ 0.94941138, -0.40213943, -0.10820081, -0.83798346],\n","       [ 0.35225902,  2.1222148 ,  1.79553503,  1.41093948]])"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"markdown","metadata":{"id":"ssOpFY-uzYk9"},"source":["`normalize_score()`関数が完成したら、以下のセルを実行して標準化された`score`配列のすべての要素の整数値の和を求めることで動作を確認してください。すべての要素の整数値の和は`27`となります。（コードによってはそうならない場合もあります）"]},{"cell_type":"code","metadata":{"id":"15pWtr1hzYk-","executionInfo":{"status":"ok","timestamp":1603700430636,"user_tz":-540,"elapsed":549,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"6a19651e-849f-46cd-8935-0fded3d4c369","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["normalize_score(score).astype(np.int64).sum()"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["27"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"odb-GXfVzYk_","executionInfo":{"status":"ok","timestamp":1603700442039,"user_tz":-540,"elapsed":559,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["assert normalize_score(score).astype(np.int64).sum() == 27"],"execution_count":33,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k2WUqtozzYlA"},"source":["### 参考\n","pandasでは以下のようにしてデータフレームの各列をその列の平均値と分散を用いて標準化できます。"]},{"cell_type":"code","metadata":{"id":"Iem35sUfzYlA","executionInfo":{"status":"ok","timestamp":1603700451050,"user_tz":-540,"elapsed":458,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"1023a7a4-c255-4634-ead8-d6da544136e5","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["score_df = pd.read_csv('exam_score.csv')\n","((score_df - score_df.mean()) / score_df.std(ddof=0)).head(5)"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-1.025785</td>\n","      <td>0.158828</td>\n","      <td>0.222884</td>\n","      <td>0.614446</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.612372</td>\n","      <td>-0.869612</td>\n","      <td>0.140113</td>\n","      <td>0.286478</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-1.071720</td>\n","      <td>-0.448887</td>\n","      <td>-0.935912</td>\n","      <td>0.333331</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.959977</td>\n","      <td>2.215709</td>\n","      <td>1.298908</td>\n","      <td>2.347991</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.811607</td>\n","      <td>1.467753</td>\n","      <td>1.340294</td>\n","      <td>0.801856</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     kokugo    shakai    sugaku      rika\n","0 -1.025785  0.158828  0.222884  0.614446\n","1 -0.612372 -0.869612  0.140113  0.286478\n","2 -1.071720 -0.448887 -0.935912  0.333331\n","3  1.959977  2.215709  1.298908  2.347991\n","4  0.811607  1.467753  1.340294  0.801856"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"markdown","metadata":{"id":"95IEcRdpzYlB"},"source":["## Q4 ヒストグラム\n","`matplotlib`では、以下のように1次配列を入力として、ヒストグラムを可視化することができます。\n","```Python\n","plt.hist(配列, bins=階級数);\n","```\n","\"exam_score.csv\"ファイルを読み込み、NumPyの配列を作成し、数学（3列目）の点数のヒストグラムを可視化してください。その際、階級数は任意に設定してください。"]},{"cell_type":"code","metadata":{"id":"eCmPg9BUzYlB","executionInfo":{"status":"ok","timestamp":1603700468551,"user_tz":-540,"elapsed":753,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"90cb6fca-2889-4ab1-b96c-6756e99ef7e4","colab":{"base_uri":"https://localhost:8080/","height":350}},"source":["# csvファイルからNumPy配列の作成\n","score = np.loadtxt(\"exam_score.csv\", delimiter=\",\", skiprows=1)\n","plt.hist(score[:,2],bins=20)### 数学の点数の配列, bins=階級数 ###"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 4.,  8.,  4.,  5., 10., 19., 13., 13., 15., 10.,  6.,  9., 10.,\n","         4.,  7., 12.,  5.,  6.,  5.,  1.]),\n"," array([  0.,   5.,  10.,  15.,  20.,  25.,  30.,  35.,  40.,  45.,  50.,\n","         55.,  60.,  65.,  70.,  75.,  80.,  85.,  90.,  95., 100.]),\n"," <a list of 20 Patch objects>)"]},"metadata":{"tags":[]},"execution_count":36},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"TyKwqaaVzYlC"},"source":["### 参考\n","平均=muと標準偏差=stdの時の正規分布に従うランダムな値からなる配列を入力とするヒストグラム"]},{"cell_type":"code","metadata":{"id":"GmR0Zyv7zYlC","executionInfo":{"status":"ok","timestamp":1603700481510,"user_tz":-540,"elapsed":579,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"d00c7041-55ea-4885-9cef-4960c8de8161","colab":{"base_uri":"https://localhost:8080/","height":268}},"source":["mu, std = 0, 1\n","nor = np.random.normal(mu, std,200)\n","plt.hist(nor, bins=20);"],"execution_count":37,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"osgf-0ElzYlD"},"source":["## Q5 相関\n","### Q5.1\n","整数を要素とする同じ長さの2つの1次元配列を入力として受け取り、それらの配列の要素の相関係数を返す`correlation()`関数を完成させてください。2つの配列は先頭から順にそれぞれの要素が対応するものとします。それぞれの配列の対応する要素の値を$x_{i}, y_{i}$とすると、相関係数は以下のように求められます。\n","\n","$\\frac{1}{n}\\Sigma^{n}_{i=1}(\\frac{x_{i}-\\overline{x}}{s_{x}})(\\frac{y_{i}-\\overline{y}}{s_{y}})$\n","\n","$\\overline{x}, \\overline{y}$は平均、$s_{x}, s_{y}$は標準偏差です。"]},{"cell_type":"code","metadata":{"id":"Zdj-ZIDKzYlD","executionInfo":{"status":"ok","timestamp":1603700486312,"user_tz":-540,"elapsed":547,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["def correlation(x, y):\n","    dx = x-x.mean()\n","    dy = y-y.mean()\n","    sdx = dx/x.std()\n","    sdy = dy/y.std() \n","    return (sdx*sdy).sum()/len(x)### 配列xと配列yの相関係数を計算するコード ###"],"execution_count":38,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"61G6nvlVzYlE"},"source":["`correlation()`関数が完成したら、以下のセルを実行して動作を確認してください。それぞれ相関係数は`1`,`-1`となります"]},{"cell_type":"code","metadata":{"id":"Id35WaArzYlF","executionInfo":{"status":"ok","timestamp":1603700577658,"user_tz":-540,"elapsed":524,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"3d4c7b0c-b5a7-4977-8454-6ec9302f9547","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["correlation(np.array([-1,1]),np.array([ -1, 1]))"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"Nr4DyrGczYlF","executionInfo":{"status":"ok","timestamp":1603700579408,"user_tz":-540,"elapsed":538,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["assert correlation(np.array([-1,1]),np.array([ -1, 1])) == 1"],"execution_count":40,"outputs":[]},{"cell_type":"code","metadata":{"id":"JDw9_hK6zYlG","executionInfo":{"status":"ok","timestamp":1603700581575,"user_tz":-540,"elapsed":515,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"33e99ed1-2808-4198-b020-7aa9167a49b1","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["correlation(np.array([1,-1]),np.array([-1, 1]))"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-1.0"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"rU8ze-hzzYlH","executionInfo":{"status":"ok","timestamp":1603700585059,"user_tz":-540,"elapsed":594,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["assert correlation(np.array([1,-1]),np.array([-1, 1])) == -1"],"execution_count":42,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6mpMcX3UzYlI"},"source":["### Q5.2\n","以下のような形式の\"exam_score.csv\"ファイルを読み込み、数学と理科の点数の関係を散布図として可視化してください。\n","```Python\n","## exam_score.csvファイル\n","kokugo, shakai, sugaku, rika\n","30, 43, 51, 63\n","39, 21, 49, 56\n","...\n","```\n","`matplotlib`では、以下のように2つの1次配列を入力として、散布図を可視化することができます。\n","```Python\n","plt.plot(配列1, 配列2, 'o');\n","```"]},{"cell_type":"code","metadata":{"id":"V9_kb6tazYlI","executionInfo":{"status":"ok","timestamp":1603700593296,"user_tz":-540,"elapsed":530,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"2b24bb38-111b-4a6d-c316-b23cfc660d96","colab":{"base_uri":"https://localhost:8080/","height":282}},"source":["# csvファイルからNumPy配列の作成\n","score = np.loadtxt(\"exam_score.csv\", delimiter=\",\", skiprows=1)\n","plt.plot(score[:,2],score[:,3],'o')### 数学の点数の配列, 理科の点数の配列 ###, 'o'"],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fefc5b52fd0>]"]},"metadata":{"tags":[]},"execution_count":43},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"G3qtWyv5zYlJ"},"source":["### 参考\n","NumPyの`corrcoef()`関数を使うと2つの配列の共分散行列を以下のように求めることができます。"]},{"cell_type":"code","metadata":{"id":"kSVhEwk-zYlK","executionInfo":{"status":"ok","timestamp":1603700613673,"user_tz":-540,"elapsed":509,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"82c9e762-f06d-429d-878e-cb275cd6e948","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["score = np.loadtxt(\"exam_score.csv\", delimiter=\",\", skiprows=1)\n","np.corrcoef(score[:,0], score[:,1])"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1.        , 0.78262164],\n","       [0.78262164, 1.        ]])"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"markdown","metadata":{"id":"dXgjxyOMzYlK"},"source":["pandasのcorrメソッドを使うとデータフレームの列間の相関係数を以下のように求めることができます。"]},{"cell_type":"code","metadata":{"id":"F1GK1XhbzYlL","executionInfo":{"status":"ok","timestamp":1603700616641,"user_tz":-540,"elapsed":530,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"047d53a0-5fb2-4d37-ea95-22b87e460a33","colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["score = pd.read_csv(\"exam_score.csv\", sep=\",\")\n","score.corr(method='pearson')"],"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>kokugo</th>\n","      <th>shakai</th>\n","      <th>sugaku</th>\n","      <th>rika</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>kokugo</th>\n","      <td>1.000000</td>\n","      <td>0.782622</td>\n","      <td>0.718526</td>\n","      <td>0.717996</td>\n","    </tr>\n","    <tr>\n","      <th>shakai</th>\n","      <td>0.782622</td>\n","      <td>1.000000</td>\n","      <td>0.778242</td>\n","      <td>0.834075</td>\n","    </tr>\n","    <tr>\n","      <th>sugaku</th>\n","      <td>0.718526</td>\n","      <td>0.778242</td>\n","      <td>1.000000</td>\n","      <td>0.817947</td>\n","    </tr>\n","    <tr>\n","      <th>rika</th>\n","      <td>0.717996</td>\n","      <td>0.834075</td>\n","      <td>0.817947</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          kokugo    shakai    sugaku      rika\n","kokugo  1.000000  0.782622  0.718526  0.717996\n","shakai  0.782622  1.000000  0.778242  0.834075\n","sugaku  0.718526  0.778242  1.000000  0.817947\n","rika    0.717996  0.834075  0.817947  1.000000"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"markdown","metadata":{"id":"_7Hxd_KzzYlM"},"source":["これらの相関係数の大小に基づいて以下のように列間の相関の大小をヒートマップとして可視化することができます。"]},{"cell_type":"code","metadata":{"id":"dzmbFj8pzYlM","executionInfo":{"status":"ok","timestamp":1603700619943,"user_tz":-540,"elapsed":753,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"41a21323-6982-437f-d690-4df8d5ad2849","colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["plt.colorbar(plt.imshow(score.corr(method='pearson')));"],"execution_count":46,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}