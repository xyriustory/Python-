{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"},"colab":{"name":"1-4.ipynb のコピー","provenance":[{"file_id":"https://github.com/UTokyo-IPP/utpython/blob/master/1/1-4.ipynb","timestamp":1600849259583}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"8L5qxJqJDQuJ","colab_type":"text"},"source":["# 1-4. デバッグ\n","デバッグについて説明します。\n","\n","参考\n","\n","- https://docs.python.org/ja/3/tutorial/errors.html\n","\n","プログラムに**バグ**（誤り）があって正しく実行できないときは、バグを取り除く**デバッグ**の作業が必要になります。\n","\n","エラーには大きく分けて、**文法エラー**、**実行エラー**、**論理エラー**があります。以下、それぞれのエラーについて対処法を説明します。\n","また `print` を用いたデバッグについても紹介します。"]},{"cell_type":"markdown","metadata":{"id":"vY8fa0TzDQuN","colab_type":"text"},"source":["## **文法エラー**：Syntax Errors\n","\n","文法エラーは、入力がPythonの文法に違反しているエラーです。\n","文法エラーに対しては、\n","\n","1. まず、エラーメッセージを確認しましょう。\n","2. エラーメッセージの最終行を見て、それが `SyntaxError` であることを確認しましょう。\n","3. エラーとなっているコードの行数を確認しましょう。\n","4. そして、当該行付近のコードを注意深く確認しましょう。\n","\n","よくある文法エラーの例：\n","\n","- クォーテーションや括弧の閉じ忘れ\n","- コロンのつけ忘れ\n","- `=` と `==` の混同\n","- インデントの誤り\n","- 全角の空白\n","\n","など"]},{"cell_type":"code","metadata":{"tags":["raises-exception"],"id":"K7woRPNMDQuQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"error","timestamp":1600849284202,"user_tz":-540,"elapsed":795,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"68a88112-87e9-49c6-cdeb-2a5a0826faf0"},"source":["print(\"This is the error)"],"execution_count":1,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-c1b5b7f1f4a3>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    print(\"This is the error)\u001b[0m\n\u001b[0m                             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOL while scanning string literal\n"]}]},{"cell_type":"code","metadata":{"tags":["raises-exception"],"id":"qEW2orH3DQuh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"error","timestamp":1600849284206,"user_tz":-540,"elapsed":789,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"79cd96ca-4ba0-4a02-f189-f3452b47eb8c"},"source":["1 +　1"],"execution_count":2,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-6a1d737d6e97>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    1 +　1\u001b[0m\n\u001b[0m       　^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character in identifier\n"]}]},{"cell_type":"markdown","metadata":{"id":"lRMIAYwQDQuw","colab_type":"text"},"source":["## **実行エラー**：Runtime Errors\n","\n","実行エラーは、コードの実行時に検出されるエラーです。\n","実行エラーに対しては、\n","\n","1. まず、エラーメッセージを確認しましょう。\n","2. エラーメッセージの最終行を見て、そのエラーのタイプを確認しましょう。\n","3. エラーとなっているコードの行数を確認しましょう。\n","4. そして、当該行付近のコードについて、どの部分が実行エラーのタイプに関係しているか確認しましょう。もし複数の原因がありそうであれば、行を分割、改行して再度実行し、エラーを確認しましょう。\n","5. 原因がわからない場合は、 `print` を挿入して処理の入出力の内容を確認しましょう。\n","\n","よくある実行エラーの例：\n","\n","- 文字列やリストの要素エラー\n","- 変数名・関数名の打ち間違え\n","- 無限の繰り返し\n","- 型と処理の不整合\n","- ゼロによる割り算\n","- ファイルの入出力誤り、\n","\n","など"]},{"cell_type":"code","metadata":{"tags":["raises-exception"],"id":"mAa_2z94DQu1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":164},"executionInfo":{"status":"error","timestamp":1600849344705,"user_tz":-540,"elapsed":601,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"a48623cd-f06f-4579-b39b-56dc6dbb527a"},"source":["print(1/0)"],"execution_count":3,"outputs":[{"output_type":"error","ename":"ZeroDivisionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-2fc232d1511a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m: division by zero"]}]},{"cell_type":"markdown","metadata":{"id":"qUies7JPDQvB","colab_type":"text"},"source":["## **論理エラー**：Logical Errors\n","\n","論理エラーとは、プログラムを実行できるが、プログラムが意図したように動作しないというエラーです。\n","論理エラーに対しては、\n","\n","1. 入力に対する期待される出力と実際の出力を確認しましょう。\n","2. コードを読み進めながら、期待する処理と異なるところを見つけましょう。必要であれば、 `print` を挿入して処理の入出力の内容を確認しましょう。"]},{"cell_type":"markdown","metadata":{"id":"NNiuXuG6DQvC","colab_type":"text"},"source":["## `print` によるデバッグ\n","\n","**`print`** を用いたデバッグについて紹介しましょう。\n","以下の関数 `median(x,y,z)` は、`x` と `y` と `z` の中間値（真ん中の値）を求めようとするものです。\n","`x` と `y` と `z` は相異なる数であると仮定します。"]},{"cell_type":"code","metadata":{"id":"C7X9PFSJDQvF","colab_type":"code","colab":{}},"source":["def median(x,y,z):\n","    if x>y:\n","        x = y\n","        y = x\n","    if z<x:\n","        return x\n","    if z<y:\n","        return z\n","    return y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EfkpWKFVDQvT","colab_type":"code","colab":{}},"source":["median(3,1,2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-I151RsmDQvi","colab_type":"text"},"source":["このようにこのプログラムは間違っています。最初のif文で `x>y` のときに `x` と `y` を交換しようとしているのですが、\n","それがうまく行っていないようです。\n","そこで、最初のif文の後に `print` を入れて、`x` と `y` の値を表示させましょう。"]},{"cell_type":"code","metadata":{"id":"sFR936vqDQvk","colab_type":"code","colab":{}},"source":["def median(x,y,z):\n","    if x>y:\n","        x = y\n","        y = x\n","    print(x,y)\n","    if z<x:\n","        return x\n","    if z<y:\n","        return z\n","    return y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yGciID3GDQvu","colab_type":"code","colab":{}},"source":["median(3,1,2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KTnsfe2QDQv0","colab_type":"text"},"source":["`x` と `y` が同じ値になってしまっています。そこで、以下のように修正します。"]},{"cell_type":"code","metadata":{"id":"hlUdCO73DQv1","colab_type":"code","colab":{}},"source":["def median(x,y,z):\n","    if x>y:\n","        w = x\n","        x = y\n","        y = w\n","    print(x,y)\n","    if z<x:\n","        return x\n","    if z<y:\n","        return z\n","    return y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"79kUZhE4DQv-","colab_type":"code","colab":{}},"source":["median(3,1,2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mfV2j1Y9DQwE","colab_type":"text"},"source":["正しく動きました。 `print` は削除してもよいのですが、今後のために `#` を付けてコメントアウトして残しておきます。"]},{"cell_type":"code","metadata":{"id":"U75kDVueDQwF","colab_type":"code","colab":{}},"source":["def median(x,y,z):\n","    if x>y:\n","        w = x\n","        x = y\n","        y = w\n","    #print(x,y)\n","    if z<x:\n","        return x\n","    if z<y:\n","        return z\n","    return y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EFCQRB7WDQwM","colab_type":"code","colab":{}},"source":["median(3,1,2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BSzUpULRDQwV","colab_type":"text"},"source":["## コーディングスタイル\n","\n","実は、生じたバグを取る対処法よりも、そもそもバグが生じにくくする予防法の方が大切です。\n","Pythonにおいて特に重要視されているのが、**コーディングスタイル**、つまりコードの書き方です。\n","読みにくい（可読性の低い）コードだと、些細なミスが生じやすく、また見つけにくいからです。\n","\n","Pythonでは[**PEP8**](https://www.python.org/dev/peps/pep-0008/)（[非公式日本語訳](http://pep8-ja.readthedocs.io/ja/latest/)）と呼ばれる公式のスタイルガイドがあります。\n","PEP8には様々な側面でスタイルに関する規則があり、コードの可読性を高めることが強く推奨されています。\n","ここまでに扱った言語の要素について、たとえば、\n","\n","* インデントは半角スペースを4つで1レベル\n","* `=` `+=` `==` などの演算子の前後に半角スペースを1つ入れる\n","* `*` と `+` の複合式では `+` の前後に半角スペースを1つ入れる（例：`2*x + y`）\n","* 関数の開き括弧の前にスペースを入れない\n","* `l` `I` `O` を変数名として使わない\n","* 真理値の比較に `==` や `is` を使わない\n","\n","などが代表的です。\n","\n","PEP8に基づいたコーディングスタイルの自動検査器もあります（参照：[pycodestyle](https://pypi.org/project/pycodestyle/)）。\n","オンラインサービスもいくつか利用できるので（例：[PEP8 online](http://pep8online.com/)）、適宜活用してみましょう。\n","\n","PEP8には陽に言及されていないもの、プログラミング一般に重要なこともあります。\n","たとえば、\n","\n","* 自己説明的でない“マジックナンバー”ではなく記号的に意味がわかる変数を使う\n","* 不要なコードは削除する\n","* 1つの関数では1つのタスクだけを処理する\n","\n","などは、可読性を上げる代表的なポイントです。\n","\n","勘違いはバグを引き起こします。自らが勘違いしないコードを書くことが肝要です。"]},{"cell_type":"markdown","metadata":{"id":"PxnJTc0WDQwX","colab_type":"text"},"source":["## ▲assert文によるデバッグ\n","\n","論理エラーを見つける上で有用なのが、**assert文**です。\n","`assert` の次に書かれた条件式が偽であった時に、`AssertionError` が発生してプログラムが停止する仕組みです。\n","次に例を示します。"]},{"cell_type":"code","metadata":{"tags":["raises-exception"],"id":"CTlYcIhYDQwY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":317},"executionInfo":{"status":"error","timestamp":1600849388869,"user_tz":-540,"elapsed":592,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"b2caca60-29ce-4b6f-d26b-17845460cd34"},"source":["import math\n","def sqrt(x):\n","    assert x >= 0\n","    return math.sqrt(x)\n","\n","sqrt(2)\n","sqrt(-2)"],"execution_count":4,"outputs":[{"output_type":"error","ename":"AssertionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-c9e6b0bd682b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-4-c9e6b0bd682b>\u001b[0m in \u001b[0;36msqrt\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmath\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0;32massert\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAssertionError\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"77D3fheGDQwh","colab_type":"text"},"source":["ここで定義した `sqrt` 関数は、平方根を求める関数です。\n","非負の数しかとらないことを前提とした関数なので、\n","この前提を `assert x >= 0` としてプログラムの中で記述しています。\n","`sqrt(2)` の呼び出しでは、この前提は満たされ、問題なく計算が進みます。\n","\n","しかし、`sqrt(-2)` の呼び出しでは、この前提が満たされないため、assert文が `AssertionError` を出します。\n","このエラーメッセージによって、どの部分のどのような前提が満たされなかったかが簡単にわかります。\n","これは、論理エラーの原因の絞り込みに役立ちます。"]},{"cell_type":"code","metadata":{"id":"rkLEbPhEDQwi","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}