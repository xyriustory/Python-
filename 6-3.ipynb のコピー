{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"},"colab":{"name":"6-3.ipynb のコピー","provenance":[{"file_id":"https://github.com/UTokyo-IPP/utpython/blob/master/6/6-3.ipynb","timestamp":1601611888673}]}},"cells":[{"cell_type":"code","metadata":{"id":"49potoLygdZp","executionInfo":{"status":"ok","timestamp":1601611910639,"user_tz":-540,"elapsed":882,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"93a8377e-2a73-4ec1-a0de-1d8a984a5a1f","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["##====================================================\n","## このセルを最初に実行せよ---Run this cell initially.\n","##====================================================\n","import sys\n","if 'google.colab' in sys.modules:\n","    !wget -P . https://raw.githubusercontent.com/UTokyo-IPP/utpython/master/6/jugemu.txt"],"execution_count":1,"outputs":[{"output_type":"stream","text":["--2020-10-02 04:11:50--  https://raw.githubusercontent.com/UTokyo-IPP/utpython/master/6/jugemu.txt\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 366 [text/plain]\n","Saving to: ‘./jugemu.txt’\n","\n","jugemu.txt          100%[===================>]     366  --.-KB/s    in 0s      \n","\n","2020-10-02 04:11:50 (17.4 MB/s) - ‘./jugemu.txt’ saved [366/366]\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"66PrsmfsgdZv"},"source":["# 6-3. クラス\n","\n","Pythonにおけるオブジェクト指向プログラミングのうち、クラスを定義する方法について簡単に説明します。\n","\n","参考\n","\n","- https://docs.python.org/ja/3/tutorial/classes.html\n","- https://docs.python.org/ja/3/reference/datamodel.html"]},{"cell_type":"markdown","metadata":{"id":"_ku0ywq4gdZw"},"source":["## クラス定義\n","\n","Pythonでは全てのデータはオブジェクトなのですが、\n","以下では特に、クラス定義によって作成されたクラスを型とするデータを扱います。\n","このようなデータは、**オブジェクト指向プログラミング**における典型的な**オブジェクト**です。\n","そこで以下では、オブジェクトという用語をもっぱら使います。\n","\n","4-1で見たように、ファイルオブジェクトに対して `readline()` というメソッドを呼び出すと、\n","ファイルの行が文字列として次々と返されます。\n","ここでは、ファイルオブジェクトのようなオブジェクトで、\n","`readline()` というメソッドが呼び出されると、常に `'Hello.\\n'` という文字列を返すようなものを作ってみましょう。\n","\n","そのためには、新しいクラスを定義します。\n","**クラス**とは、オブジェクトの種類を意味します。\n","新しいクラスを定義すると、そのクラスに属するオブジェクトを作ることができるようになります。\n","それらのオブジェクトの型は、その新しいクラスになります。\n","\n","ここでは、ずっと `'Hello.\\n'` を返し続けるので、\n","`HelloForEver` という名前を持つクラスを定義しましょう。\n","そして、`HelloForEver` というクラスを型とするオブジェクトを作ります。"]},{"cell_type":"code","metadata":{"id":"ZfVfG-kFgdZx","executionInfo":{"status":"ok","timestamp":1601615019910,"user_tz":-540,"elapsed":549,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["class HelloForEver:\n","    def readline(self):\n","        return 'Goodbye.\\n'"],"execution_count":85,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"peXmAexvgdZ1"},"source":["一般にクラス定義は、以下のような形をしています。\n","\n","---\n","```Python\n","class クラス名:\n","    def メソッド名(self, 引数, ...):\n","        実行文\n","    def メソッド名(self, 引数, ...):\n","        実行文\n","    ...\n","```\n","---\n","メソッド定義は関数定義と同じ形をしていますが、\n","クラス定義の中に入っています。\n","メソッド定義において、その最初の引数には慣例として `self` という名前を付けます。\n","この引数には、メソッドが呼び出されたオブジェクト自身が渡されます。\n","\n","上の例では、`readline` というメソッドが1つ定義されています。\n","\n","以下のようにして、このクラスのオブジェクトを作ることができます。"]},{"cell_type":"code","metadata":{"id":"p8ASF7PJgdZ1","executionInfo":{"status":"ok","timestamp":1601615021128,"user_tz":-540,"elapsed":451,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["f = HelloForEver()"],"execution_count":86,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rrFJ0DF5gdZ5"},"source":["`HelloForEver` を型とする新しいオブジェクトが作られて変数 `f` の値となります。\n","\n","一般に、オブジェクトの生成は、\n","\n","---\n","```Python\n","クラス名(式, ...)\n","```\n","---\n","という式で行います。このようにオブジェクトを生成する式は**コンストラクタ**と呼ばれます。\n","なお、上の例では、括弧の中に式は1つもありません。"]},{"cell_type":"markdown","metadata":{"id":"4f9Yfg7KgdZ5"},"source":["このようにして作ったオブジェクトの型を確認してください。"]},{"cell_type":"code","metadata":{"id":"MDo8EqqGgdZ6","executionInfo":{"status":"ok","timestamp":1601615022967,"user_tz":-540,"elapsed":627,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"9eebfa43-2a58-47d2-e64c-b454e264c207","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["type(f)"],"execution_count":87,"outputs":[{"output_type":"execute_result","data":{"text/plain":["__main__.HelloForEver"]},"metadata":{"tags":[]},"execution_count":87}]},{"cell_type":"markdown","metadata":{"id":"AgJh7F7tgdZ9"},"source":["`__main__.HelloForEver` と表示されたでしょう。\n","`__main__` は、ノートブックの式が評価されているモジュールを指すので、\n","このオブジェクトの型が、上で定義した `HelloForEver` クラスであることがわかります。\n","クラスのコンストラクタによって生成されたオブジェクトを、そのクラスの**インスタンス**と言います。\n","上のオブジェクトは `HelloForEver` クラスのインスタンスです。\n","\n","オブジェクトそのものは以下のように表示されます。"]},{"cell_type":"code","metadata":{"id":"cWiOif5vgdZ9","executionInfo":{"status":"ok","timestamp":1601615023170,"user_tz":-540,"elapsed":389,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"88a667d6-d01d-4130-e06b-9942d539bccd","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["f"],"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<__main__.HelloForEver at 0x7f0821e3a1d0>"]},"metadata":{"tags":[]},"execution_count":88}]},{"cell_type":"markdown","metadata":{"id":"ezWYy1NsgdZ_"},"source":["このオブジェクトに対して、`readline` というメソッドを呼び出すことができます。"]},{"cell_type":"code","metadata":{"id":"xzXScibKgdZ_","executionInfo":{"status":"ok","timestamp":1601615023866,"user_tz":-540,"elapsed":444,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"52f9c05e-f31c-40f3-d488-ed3cebfe2d08","colab":{"base_uri":"https://localhost:8080/","height":37}},"source":["f.readline()"],"execution_count":89,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Goodbye.\\n'"]},"metadata":{"tags":[]},"execution_count":89}]},{"cell_type":"markdown","metadata":{"id":"rcx7Ue3YgdaB"},"source":["この例では、`f` という変数に入っているオブジェクトが `self` という引数に渡されて、\n","`readline` の本体である以下の文が実行されました。\n","\n","---\n","```Python\n","    return 'Hello.\\n'\n","```\n","---\n","（この例では `self` は参照されていません。）\n","\n","何回やっても同じです。"]},{"cell_type":"code","metadata":{"id":"TkVjbAx5gdaB","executionInfo":{"status":"ok","timestamp":1601615025277,"user_tz":-540,"elapsed":460,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"613eb53a-594a-4e97-9213-f1a594346f7f","colab":{"base_uri":"https://localhost:8080/","height":37}},"source":["f.readline()"],"execution_count":90,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Goodbye.\\n'"]},"metadata":{"tags":[]},"execution_count":90}]},{"cell_type":"code","metadata":{"id":"rMzpNH7agdaD","executionInfo":{"status":"ok","timestamp":1601615026895,"user_tz":-540,"elapsed":458,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"77509d7e-1e58-4184-f7f4-f8e79c0f5312","colab":{"base_uri":"https://localhost:8080/","height":37}},"source":["f.readline()"],"execution_count":91,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Goodbye.\\n'"]},"metadata":{"tags":[]},"execution_count":91}]},{"cell_type":"markdown","metadata":{"id":"HzpzBwqNgdaF"},"source":["## 初期化と属性\n","\n","以下の例では、初期化のメソッドが定義され、オブジェクトに属性が与えられます。\n","\n","**初期化**のメソッドは **`__init__`** という名前を持ち、\n","オブジェクトが作られたときに自動的に呼び出されます。\n","`__init__` の引数は、オブジェクト自身と、クラス名の後に与えられる式の値です。"]},{"cell_type":"code","metadata":{"id":"SxmHq9wvgdaF","executionInfo":{"status":"ok","timestamp":1601615028520,"user_tz":-540,"elapsed":504,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["class HelloFile:\n","    def __init__(self, n):\n","        self.n = n\n","    def readline(self):\n","        if self.n == 0:\n","            return ''\n","        self.n = self.n - 1\n","        return 'Goodbye.\\n'"],"execution_count":92,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sU55chpCgdaG"},"source":["この例では、以下のようにしてオブジェクトが作られます。"]},{"cell_type":"code","metadata":{"id":"ss6xxs5lgdaH","executionInfo":{"status":"ok","timestamp":1601615030397,"user_tz":-540,"elapsed":506,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["f = HelloFile(3)"],"execution_count":93,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yKX89H39gdaI"},"source":["すると、`HelloFile` を型とする新しいオブジェクトが作られて、\n","そのオブジェクト自身が `self` に、`3` が `n` に渡されて、\n","`self.n = n` という文が実行されます。\n","\n","`self.n` という式は、このオブジェクトの `n` という名前の属性を表します。\n","\n","一般に、`class` の構文によって定義されたクラスを型とするオブジェクトは、\n","属性を持つことができます。\n","**属性**とは、個々のオブジェクトごとに記録される値であり、\n","オブジェクト内の変数と考えられます。\n","オブジェクトの属性は、オブジェクトに対してその**属性名**を指定して、参照したり設定したりできます。\n","オブジェクトの属性は、`self.属性名` という式で参照されます。\n","`self.属性名` を代入文の左辺に書けば、属性を設定することができます。\n","\n","`self.n = n` のうち、`self.` の次の `n` は属性を表し、\n","右辺の `n` は、`__init__` メソッドの引数を表していますので、\n","混同しないようにしてください。\n","\n","この例では、新しく作られたオブジェクトの `n` という属性が、引数 `n` の値である `3` に設定されます。\n","\n","`readline` メソッドは以下のように定義されています。\n","\n","---\n","```Python\n","    def readline(self):\n","        if self.n == 0:\n","            return ''\n","        self.n = self.n - 1\n","        return 'Hello.\\n'\n","```\n","---\n","オブジェクトの属性 `n` を参照して、それが `0` ならば空文字列を返します。\n","そうでなければ、属性 `n` を `1` 減らしてから文字列 `'Hello.\\n'` を返します。"]},{"cell_type":"code","metadata":{"id":"uVHpBmh0gdaI","executionInfo":{"status":"ok","timestamp":1601615032199,"user_tz":-540,"elapsed":522,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"ff6ee2fd-8118-4ce6-902b-daf3cbbdfced","colab":{"base_uri":"https://localhost:8080/","height":37}},"source":["f.readline()"],"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Goodbye.\\n'"]},"metadata":{"tags":[]},"execution_count":94}]},{"cell_type":"code","metadata":{"id":"S3DNeJu6gdaK","executionInfo":{"status":"ok","timestamp":1601615032824,"user_tz":-540,"elapsed":428,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"57a3ec41-790c-402b-f448-3bdadac8d788","colab":{"base_uri":"https://localhost:8080/","height":37}},"source":["f.readline()"],"execution_count":95,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Goodbye.\\n'"]},"metadata":{"tags":[]},"execution_count":95}]},{"cell_type":"code","metadata":{"id":"bVqkfrulgdaL","executionInfo":{"status":"ok","timestamp":1601615033895,"user_tz":-540,"elapsed":495,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"48926fab-a1e5-42b7-daf1-6c22d26ca3d8","colab":{"base_uri":"https://localhost:8080/","height":37}},"source":["f.readline()"],"execution_count":96,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Goodbye.\\n'"]},"metadata":{"tags":[]},"execution_count":96}]},{"cell_type":"code","metadata":{"id":"_9zElgITgdaM","executionInfo":{"status":"ok","timestamp":1601615034738,"user_tz":-540,"elapsed":427,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f7cf8eaa-79ea-4c02-9d7f-ed5364e2bd84","colab":{"base_uri":"https://localhost:8080/","height":37}},"source":["f.readline()"],"execution_count":97,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["''"]},"metadata":{"tags":[]},"execution_count":97}]},{"cell_type":"markdown","metadata":{"id":"fAIi0l4QgdaO"},"source":["変数 `f` の値であるオブジェクトの属性 `n` は、`f.n` という式によって参照できます。"]},{"cell_type":"code","metadata":{"id":"h-O8gn34gdaO","executionInfo":{"status":"ok","timestamp":1601615036142,"user_tz":-540,"elapsed":481,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"50b19282-875a-497d-9b0c-f1788ef5da41","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["f.n"],"execution_count":98,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":98}]},{"cell_type":"markdown","metadata":{"id":"rXTDw-EigdaP"},"source":["ここでは詳しく説明しませんが、オブジェクトのメソッドも属性の一種です。"]},{"cell_type":"markdown","metadata":{"id":"D2mTaNmhgdaQ"},"source":["## 継承\n","\n","**継承**は、既存のクラスをもとにして、変更部分だけを与えることにより、\n","新たなクラスを定義する機能です。\n","\n","以下の例では、`HelloForEver` をもとにして `HelloFile` を定義しています。\n","一般に、新しく定義されるクラスを**子クラス**、そのもとになるクラスを**親クラス**と言います。"]},{"cell_type":"code","metadata":{"id":"wAH8ty4zgdaQ","executionInfo":{"status":"ok","timestamp":1601615053546,"user_tz":-540,"elapsed":652,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["class HelloFile(HelloForEver):\n","    def __init__(self, n):\n","        self.n = n\n","    def readline(self):\n","        if self.n == 0:\n","            return ''\n","        self.n = self.n - 1\n","        return super().readline()"],"execution_count":100,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LzAKpvMpgdaR"},"source":["ここでは、`__init__` と `readline` を新たに定義しています。\n","\n","`HelloForEver` にも `readline` があります。\n","こちらの `readline` は、`super().readline()` という式で呼び出すことができます。\n","**`super()`** は、子クラスのオブジェクトに対して親クラスのメソッドを呼び出すための構文です。\n","実際に、`HelloFile` の `readline` の中で、\n","`HelloForEver` の `readline` を呼び出しています。"]},{"cell_type":"code","metadata":{"id":"JIe9-KFXgdaS","executionInfo":{"status":"ok","timestamp":1601615056147,"user_tz":-540,"elapsed":583,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["f = HelloFile(3)"],"execution_count":101,"outputs":[]},{"cell_type":"code","metadata":{"id":"8U6ClenagdaT","executionInfo":{"status":"ok","timestamp":1601615059022,"user_tz":-540,"elapsed":552,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"b78cb87b-b701-41ee-adc9-c65ea4e3df27","colab":{"base_uri":"https://localhost:8080/","height":37}},"source":["f.readline()\n","#f.n"],"execution_count":102,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Goodbye.\\n'"]},"metadata":{"tags":[]},"execution_count":102}]},{"cell_type":"markdown","metadata":{"id":"sFVFzYtTgdaV"},"source":["## 特殊メソッド\n","\n","Pythonでは、**特殊メソッド**と呼ばれるメソッドが多数あります。\n","これらのメソッドの名前は `__` で始まり `__` で終わります。\n","\n","クラス定義の中で特殊メソッドを定義すると、そのクラスのオブジェクトに対して、\n","その特殊メソッドに対応する機能が付与されます。\n","初期化メソッド `__init__` も特殊メソッドですが、\n","以下のクラス `HelloFileIterator` では、**`__iter__`** と **`__next__`** という特殊メソッドが定義されています。\n","このクラスは、`HelloFile` を継承して定義されています。\n","\n","`__iter__` メソッドは、オブジェクトに対して関数 `iter` が適用されたときに呼び出されます。\n","`__iter__` メソッドの値が関数 `iter` の値となります。\n","以下の例では、`__iter__` はオブジェクト自身を返しています。\n","したがって、オブジェクトに `iter` が適用されると、オブジェクト自身が返ります。"]},{"cell_type":"code","metadata":{"id":"vDk4_awbgdaV","executionInfo":{"status":"ok","timestamp":1601615150226,"user_tz":-540,"elapsed":627,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["class HelloFileIterator(HelloFile):\n","    def __iter__(self):\n","        return self\n","    def __next__(self):\n","        line = self.readline()\n","        if line == '':\n","            raise StopIteration\n","        return line"],"execution_count":103,"outputs":[]},{"cell_type":"code","metadata":{"id":"InLmDWNZgdaW","executionInfo":{"status":"ok","timestamp":1601615151746,"user_tz":-540,"elapsed":545,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["f = HelloFileIterator(3)"],"execution_count":104,"outputs":[]},{"cell_type":"code","metadata":{"id":"3hPZhlO7gdaX","executionInfo":{"status":"ok","timestamp":1601615153849,"user_tz":-540,"elapsed":603,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"7f4b7165-8818-40d4-aa80-621a459637e8","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(f is iter(f))"],"execution_count":105,"outputs":[{"output_type":"stream","text":["True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PLCn3UG3gdaZ"},"source":["上の例で、`iter(f)` として関数 `iter` を呼び出すと、\n","`f.__iter__()` としてメソッド `__iter__` が `f` に対して呼び出され、\n","その結果が `iter(f)` の値となります。\n","したがって、`iter(f)` は `f` と同じ値を返します。\n","\n","`__next__` メソッドも、オブジェクトに対して関数 `next` が適用されたときに呼び出されます。\n","`__next__` メソッドの値が `next` の値となります。\n","\n","上の例では、`self.readline()` として、オブジェクト自身に対してメソッド `readline` を呼び出しています。\n","その値が空文字列ならば、\n","\n","---\n","```Python\n","            raise StopIteration\n","```\n","---\n","という文を実行して、**`StopIteration`** というエラーを投げます。\n","実は、このエラーは、for文が捕まえて繰り返しを止める効果を持ちます。\n","なお、**`raise`** は強制的にエラーを発生させる構文です。"]},{"cell_type":"code","metadata":{"id":"js1AFR8rgdaZ","executionInfo":{"status":"ok","timestamp":1601613766605,"user_tz":-540,"elapsed":657,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["for line in f:\n","    print(line)"],"execution_count":39,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3lrP1Tilgdaa"},"source":["4-2で説明したように、上のfor文では、\n","まず `f` のオブジェクトに対して関数 `iter` が適用されます。\n","すると `f` のオブジェクト自身が返ります。\n","そして、このオブジェクトに対して関数 `next` が繰り返し適用されて、\n","その結果が変数 `line` の値となります。\n","`StopIteration` のエラーが検知されると、for文が終了します。"]},{"cell_type":"markdown","metadata":{"id":"h3X64ZS0gdaa"},"source":["## 継承による振舞いの改変\n","\n","上で示された、`HelloFileIterator` の `__next__` メソッドでは、`self.readline()` というメソッド呼び出しがありました。\n","上の例の振舞いから、そのメソッド呼び出しは、`HelloFileIterator` には `readline` メソッドが定義されていないので、親の `HelloFile` を見に行って、そこで定義された `readline` メソッドが使われたように見えます。\n","しかし、それは正確ではありません。\n","\n","`self.readline()` では、その呼び出し場所がどこであるかに関わらず、常にオブジェクト `self` の中のメソッドを探索します。\n","そして、継承があるために、`__next__(self)` における `self` が、`HelloFileIterator` のインスタンスであるとも限りません。\n","次を見てみましょう。"]},{"cell_type":"code","metadata":{"id":"v9x3V_B2gdab","executionInfo":{"status":"error","timestamp":1601615247136,"user_tz":-540,"elapsed":641,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"d5ea8aec-334e-4657-b647-3026a0cac024","colab":{"base_uri":"https://localhost:8080/","height":300}},"source":["class EmptyFile(HelloFileIterator):\n","    def readline(self):\n","        return ''\n","    \n","f = EmptyFile(3)\n","next(f)"],"execution_count":106,"outputs":[{"output_type":"error","ename":"StopIteration","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mStopIteration\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m<ipython-input-106-0980c58e36e0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mEmptyFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-103-e10e56aa4b9e>\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mline\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mStopIteration\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"Hf_YwWvKgdac"},"source":["コンストラクタに `3` を与えているので、`HelloFileIterator` と同様に `next` を3回適用できてもよさそうですが、即座に `StopIteration` が生じました。\n","これは、`__next__(self)` における `self` が、`EmptyFile` のインスタンスであり、`self.readline()` が常に `''` を返すからです。\n","\n","このように、継承は、メソッドの部分的な再定義を通じて、再定義されたメソッドを呼び出しているメソッドの振舞いを、間接的に改変することを可能にします。"]},{"cell_type":"markdown","metadata":{"id":"iACnzc63gdac"},"source":["## 練習\n","\n","`'Hello.\\n'` ではなくて、初期時に指定された文字列を繰り返し返すように、\n","新たなクラス `StringFileIterator` を定義してください。\n","\n","`StringFileIterator` は `HelloFileIterator` を継承し、\n","初期化メソッドには、文字列と回数を指定します。"]},{"cell_type":"code","metadata":{"id":"l9XKWolugdac","executionInfo":{"status":"ok","timestamp":1601614675765,"user_tz":-540,"elapsed":520,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["class StringFileIterator(HelloFileIterator):\n","    def __init__(self, s, n):\n","        self.n = n\n","        self.s = s\n","    def readline(self):\n","        if self.n == 0:\n","            return ''\n","        self.n = self.n-1\n","        #print(self.s)\n","        return self.s"],"execution_count":60,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V2x1KVClgdad"},"source":["上のセルで解答を作成した後、以下のセルを実行し、実行結果が `True` になることを確認してください。"]},{"cell_type":"code","metadata":{"tags":["raises-exception"],"id":"d5VmCLdGgdae","executionInfo":{"status":"ok","timestamp":1601614677267,"user_tz":-540,"elapsed":709,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"ee215bfe-79dc-4ce4-b565-0d5a049366b3","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["f = StringFileIterator('abc', 3)\n","#print(list(f))\n","print(list(f) == ['abc','abc','abc'])"],"execution_count":61,"outputs":[{"output_type":"stream","text":["True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"l8inmalJgdaf"},"source":["## ▲with文への対応\n","\n","ここでは詳しく説明しませんが、さらに特殊メソッドである **`__enter__`** と **`__exit__`** を定義すると、\n","**with文**にも対応できます。"]},{"cell_type":"code","metadata":{"id":"4K9xwF9mgdaf","executionInfo":{"status":"ok","timestamp":1601615310479,"user_tz":-540,"elapsed":712,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["class HelloFileIterator(HelloFile):\n","    def __enter__(self):\n","        return self\n","    def __exit__(self,exception_type,exception_value,traceback):\n","        pass\n","    def __next__(self):\n","        line = self.readline()\n","        if line == '':\n","            raise StopIteration\n","        return line\n","    def __iter__(self):\n","        return self"],"execution_count":107,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"Fe-4U49wgdag","executionInfo":{"status":"ok","timestamp":1601615311987,"user_tz":-540,"elapsed":580,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"08493f13-0ea3-499c-9889-2c8161dddd8a","colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["with HelloFileIterator(3) as f:\n","    for line in f:\n","        print(line)"],"execution_count":108,"outputs":[{"output_type":"stream","text":["Goodbye.\n","\n","Goodbye.\n","\n","Goodbye.\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dsXPAaVRgdah"},"source":["## 練習の解答"]},{"cell_type":"code","metadata":{"id":"KFWk8wT4gdah"},"source":["class StringFileIterator(HelloFileIterator):\n","    def __init__(self, s, n):\n","        self.s = s\n","        self.n = n\n","    def readline(self):\n","        if self.n == 0:\n","            return ''\n","        self.n = self.n - 1\n","        return self.s"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7x1eGCs7gdai"},"source":[""],"execution_count":null,"outputs":[]}]}