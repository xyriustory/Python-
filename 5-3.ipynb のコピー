{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"},"colab":{"name":"5-3.ipynb のコピー","provenance":[{"file_id":"https://github.com/UTokyo-IPP/utpython/blob/master/5/5-3.ipynb","timestamp":1601185427578}]}},"cells":[{"cell_type":"code","metadata":{"id":"d1ENje2TFpmI","executionInfo":{"status":"ok","timestamp":1601395530935,"user_tz":-540,"elapsed":1292,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"d581b01c-8d94-46d7-b2e1-aa54c47f676f","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["##====================================================\n","## このセルを最初に実行せよ---Run this cell initially.\n","##====================================================\n","import sys\n","if 'google.colab' in sys.modules:\n","    !wget -P . https://raw.githubusercontent.com/UTokyo-IPP/utpython/master/5/factorial.py"],"execution_count":2,"outputs":[{"output_type":"stream","text":["--2020-09-29 16:05:30--  https://raw.githubusercontent.com/UTokyo-IPP/utpython/master/5/factorial.py\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 109 [text/plain]\n","Saving to: ‘./factorial.py’\n","\n","factorial.py        100%[===================>]     109  --.-KB/s    in 0s      \n","\n","2020-09-29 16:05:30 (3.52 MB/s) - ‘./factorial.py’ saved [109/109]\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"plWU2o4_FpmV"},"source":["# 5-3. NumPyライブラリ\n","\n","NumPyについて説明します。\n","\n","参考\n","\n","- https://docs.scipy.org/doc/numpy/user/quickstart.html\n","- https://docs.scipy.org/doc/numpy/user/basics.html\n","\n","**NumPy**とは、多次元配列を効率的に扱うライブラリです。\n","Pythonの標準ライブラリではありませんが、科学技術計算や機械学習など、ベクトルや行列の演算が多用される分野では、事実上の標準ライブラリとしての地位を確立しています。\n","\n","NumPyを用いるには、まず、**`numpy`** モジュールをインポートする必要があります。\n","慣習として、`np` と別名をつけて利用されます。"]},{"cell_type":"code","metadata":{"id":"d2ckPgf6FpmW","executionInfo":{"status":"ok","timestamp":1601395532736,"user_tz":-540,"elapsed":3091,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["import numpy as np"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hgykl6uCFpmg"},"source":["NumPyでは、Python標準の数値やリストの代わりに、特別な数値や配列を用いることで、格段に効率的な配列演算を実現します。\n","以下では、配列の基本的な操作や機能を説明します。"]},{"cell_type":"markdown","metadata":{"id":"cLNXFVOtFpmh"},"source":["## 配列の構築\n","\n","**配列**とは、特定の型の値の並びです。\n","**`numpy.array()`** 関数で構築できます。\n","このとき、配列の要素はPython標準のリストやタプルで指定します。\n","どちらを用いて作成しても全く同じ配列を作成できます。"]},{"cell_type":"code","metadata":{"id":"GP5mW1M0Fpmi","executionInfo":{"status":"ok","timestamp":1601395532737,"user_tz":-540,"elapsed":3071,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"90ddd0a6-0f93-4b9a-fa48-c108077b73e9","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["a = np.array([1,2,3]) # リストから配列作成\n","print(a)\n","b = np.array((1,2,3)) # タプルからの配列作成\n","print(b)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["[1 2 3]\n","[1 2 3]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tAC8FJp9Fpmp"},"source":["`print` の結果はリストと似ていますが、要素が `,` ではなく空白で区切られているに注意してください。\n","`print` ではなく、式の評価結果の場合、より違いが明示されます。"]},{"cell_type":"code","metadata":{"id":"17m3Gty_Fpmr","executionInfo":{"status":"ok","timestamp":1601395532737,"user_tz":-540,"elapsed":3051,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"619e052c-93de-42f0-bdd0-c32a3648aa91","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3])"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"wOWvvvLlFpmz"},"source":["配列は **`numpy.ndarray`** というデータ型によって実現されています。\n","組み込み関数 `type()` を使うと、データ型を調べられます。"]},{"cell_type":"code","metadata":{"id":"Pr0nangmFpm2","executionInfo":{"status":"ok","timestamp":1601395532737,"user_tz":-540,"elapsed":3031,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"41d6f322-2bb7-4c23-fa2b-83ab61cf48e3","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["type(np.array([1,2,3,4,5])) # 配列の型 "],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"xghY9j-EFpm_","executionInfo":{"status":"ok","timestamp":1601395532738,"user_tz":-540,"elapsed":3011,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"7b102bb2-2b5f-4a9a-f712-f454c9bcc300","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["type([1,2,3,4,5])"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["list"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"Aj05pKu3FpnK"},"source":["`array()` が、リストではなく `ndarray` を返していることがわかります。\n","\n","### 要素型\n","\n","配列の要素を構成する値には幾つかの型がありますが、次の4つの型を知っていればとりあえずは十分です。\n","\n","| 型名       | 説明           |\n","|---         |---             |\n","| **`numpy.int32`**      | 整数（32-bit）を表す型   |\n","| **`numpy.float64`**    | 実数（64-bit）を表す型   |\n","| **`numpy.complex128`** | 複素数（64-bit実数の組）を表す型 |\n","| **`numpy.bool`**       | 真理値を表す型 |\n","\n","配列は、リストと異なり、型の異なる要素を混在させることはできません。\n","\n","`array()` の `dtype` 引数に、要素型を表すオブジェクトや文字列値を与えることで、指定された要素型の配列を構築できます。"]},{"cell_type":"code","metadata":{"id":"22R86__WFpnM","executionInfo":{"status":"ok","timestamp":1601395532738,"user_tz":-540,"elapsed":2990,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"8623b49a-28c5-4613-a235-f592952ef071","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(np.array([-1,0,1], dtype=np.int32)) # np.int32の代わりに'int32'でも同じ"],"execution_count":8,"outputs":[{"output_type":"stream","text":["[-1  0  1]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"W4DyXztKFpnR"},"source":["実数には、小数点が付与されて印字されます。"]},{"cell_type":"code","metadata":{"id":"BOBm968bFpnS","executionInfo":{"status":"ok","timestamp":1601395532738,"user_tz":-540,"elapsed":2970,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"298c60d4-f9aa-493e-d45a-326d4b2f3788","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(np.array([-1,0,1], dtype=np.float64)) # np.float64の代わりに'float64'でも同じ"],"execution_count":9,"outputs":[{"output_type":"stream","text":["[-1.  0.  1.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CI9ABnynFpnY"},"source":["複素数は実部と虚部を表す実数の組であり、虚部には `j` が付与されて印字されます。"]},{"cell_type":"code","metadata":{"id":"8NqLslEHFpna","executionInfo":{"status":"ok","timestamp":1601395532739,"user_tz":-540,"elapsed":2951,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"92bb62d8-c33b-4a37-f440-810565e0f009","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(np.array([-1,0,1], dtype=np.complex128)) # np.complex128の代わりに'complex128'でも同じ"],"execution_count":10,"outputs":[{"output_type":"stream","text":["[-1.+0.j  0.+0.j  1.+0.j]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TKfynE-uFpne"},"source":["数値から真理値への変換では、`0` が `False` で、`0` 以外が `True` になります。"]},{"cell_type":"code","metadata":{"id":"FY0AiPUoFpne","executionInfo":{"status":"ok","timestamp":1601395532739,"user_tz":-540,"elapsed":2931,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"25d0ec14-758e-4774-c4d2-876120145c81","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(np.array([-1,0,1], dtype=np.bool)) # np.boolの代わりに'bool'でも同じ"],"execution_count":11,"outputs":[{"output_type":"stream","text":["[ True False  True]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Jg1mSNBuFpni"},"source":["### 多次元配列\n","\n","**多次元配列**は、配列の中に配列がある入れ子の配列です。\n","入れ子のリストやタプルを `numpy.array()` に渡すことで構築できます。"]},{"cell_type":"code","metadata":{"id":"3_54kt-MFpnk","executionInfo":{"status":"ok","timestamp":1601395532740,"user_tz":-540,"elapsed":2910,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"bc0ee3f4-0086-4119-8de7-ae21c7e7634c","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(np.array([[1,2],[3,4]])) # 2次元配列の構築"],"execution_count":12,"outputs":[{"output_type":"stream","text":["[[1 2]\n"," [3 4]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4aCsaBOdFpnp","executionInfo":{"status":"ok","timestamp":1601395532740,"user_tz":-540,"elapsed":2888,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"768d5563-1b79-43c3-8b43-bcb1608388ca","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["print(np.array([[[1,2],[3,4]],[[5,6],[7,8]]])) # 3次元配列の構築"],"execution_count":13,"outputs":[{"output_type":"stream","text":["[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EVN9y5fpFpnv"},"source":["上の例からわかるように、2次元配列は行列のように、3次元配列は行列の配列のように印字されます。\n","\n","多次元配列は、要素となる配列の長さが等しいことが想定されます。\n","つまり、2次元配列は、行列のように各行の長さが等しくなければなりません。"]},{"cell_type":"code","metadata":{"id":"Dik_WPxUFpnw","executionInfo":{"status":"ok","timestamp":1601395532740,"user_tz":-540,"elapsed":2867,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"75ee09f8-2844-432a-b82a-b0716dbdaa9e","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(np.array([[1,2],[3]])) # 行の長さが異なる場合"],"execution_count":14,"outputs":[{"output_type":"stream","text":["[list([1, 2]) list([3])]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Ev2zpk3pFpn0"},"source":["このように行の長さが異なる場合は、多次元配列とは見做されず、リストの配列と見做されます。\n","本教材では、このようなデータは扱いません。\n","\n","多次元配列の各次元の長さの組を、多次元配列の**形** (shape) と呼びます。\n","特に2次元配列の場合、行列と同様に、行数（内側にある配列の数）と列数（内側にある配列の要素数）の組を使って、行数×列数で形を表記します。\n","\n","1次元配列に対して **`reshape()`** メソッドを使うと、引数で指定された形の多次元配列に変換することができます。"]},{"cell_type":"code","metadata":{"id":"sVg-jLGpFpn1","executionInfo":{"status":"ok","timestamp":1601395532741,"user_tz":-540,"elapsed":2847,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"a5f793fb-7086-4193-f185-c9a58830ba39","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a1 = np.array([0, 1, 2, 3, 4, 5]) # 1次元配列\n","a2 = a1.reshape(2,3)              # 2×3の2次元配列\n","a2\n","a1"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4, 5])"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"ZNm7uic6Fpn4"},"source":["ここで、`reshape()` を適用する前後の配列（ここでは `a1` と `a2`）は、内部的にデータを共有していることに注意してください。\n","つまり、`a1` の要素を更新すると、`a2` にも影響を及ぼします。"]},{"cell_type":"code","metadata":{"id":"HGMrXhqvFpn5","executionInfo":{"status":"ok","timestamp":1601395532741,"user_tz":-540,"elapsed":2827,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"b39d36bc-86fe-4817-8166-8179c4e0f469","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a1[1] = 6\n","print(a1)\n","print(a2)\n","print(a[0])"],"execution_count":16,"outputs":[{"output_type":"stream","text":["[0 6 2 3 4 5]\n","[[0 6 2]\n"," [3 4 5]]\n","1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"s-IFiA-eFpn8"},"source":["**`ravel()`** メソッドを使うと、多次元配列を1次元配列に戻すことができます。"]},{"cell_type":"code","metadata":{"id":"8vDvcj2bFpn8","executionInfo":{"status":"ok","timestamp":1601395532741,"user_tz":-540,"elapsed":2807,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"04948a61-b23e-491d-fe8a-8283a6b0a677","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["a = np.array([0, 1, 2, 3, 4, 5]).reshape(2,3)\n","print(a)\n","print(a.ravel())"],"execution_count":17,"outputs":[{"output_type":"stream","text":["[[0 1 2]\n"," [3 4 5]]\n","[0 1 2 3 4 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6P-a6IpQFpoA"},"source":["`ravel()` の結果も、`reshape()` と同様に、元の配列と要素を共有します。"]},{"cell_type":"code","metadata":{"id":"rJd9cqVEFpoA","executionInfo":{"status":"ok","timestamp":1601395532742,"user_tz":-540,"elapsed":2788,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f395f970-acdc-4975-cccf-37bd341324a7","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["elems = np.array([0, 1, 2, 3, 4, 5])\n","a = elems.reshape(2,3).ravel() # ravel()は要素をelemsと共有\n","elems[1] = 6\n","print(a)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["[0 6 2 3 4 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CMJ7hgT6FpoE"},"source":["なお、要素をコピーして変換する **`flatten()`** メソッドもありますが、コピーしない `ravel()` の方が効率的です。"]},{"cell_type":"markdown","metadata":{"id":"c0LZA-GCFpoF"},"source":["### ▲**配列のデータ属性**\n","\n","配列はオブジェクトであり、その配列に関する様々な情報を属性として保持します。\n","（オブジェクトの属性については6-3に簡単な説明があります。）\n","配列が持つ代表的なデータ属性（メソッド以外の属性）を次の表にまとめます。\n","\n","| 属性 | 意味 |\n","|---   |---   |\n","| `a.dtype` | 配列 `a` の要素型 |\n","| `a.shape` | 配列 `a` の形（各次元の長さのタプル）|\n","| `a.ndim` | 配列 `a` の次元数（`len(a.shape)` と等しい）|\n","| `a.size` | 配列 `a` の要素数（`a.shape` の総乗と等しい）|\n","| `a.flat` | 配列 `a` の1次元表現（`a.ravel()` と等しい）|\n","| `a.T` | 配列 `a` を転置した配列（`a` と要素を共有）|"]},{"cell_type":"markdown","metadata":{"id":"AFKlXpEkFpoF"},"source":["## 配列要素を生成する構築関数\n","\n","要素を生成して配列を構築する代表的な関数を紹介します。\n","特に断りが無い場合、ここで紹介する関数は、`array()` と同様に `dtype` 引数で要素型を指定可能です。\n","\n","### `arange`\n","\n","**`numpy.arange()`** は、組み込み関数 `range()` の配列版です（`arange` は array range の略）。\n","開始値・終了値・刻み幅を引数にとります。\n","デフォルトの開始値は `0`、刻み幅は `1` です。\n","`range()` と違って、引数の値は整数に限定されません。\n"]},{"cell_type":"code","metadata":{"id":"DKBj3aJmFpoG","executionInfo":{"status":"ok","timestamp":1601395532742,"user_tz":-540,"elapsed":2771,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"8e55440d-ca9c-498a-d922-c2ecf858a5ab","colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["print(np.arange(3)) # range(3)に対応する配列\n","print(np.arange(0, 1, 0.2)) # 0を開始値として0.2刻みで1未満の要素を生成"],"execution_count":19,"outputs":[{"output_type":"stream","text":["[0 1 2]\n","[0.  0.2 0.4 0.6 0.8]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bgfs1R7fFpoK"},"source":["### `linspace`\n","**`numpy.linspace()`** 関数は、範囲を等分割した値からなる配列を生成します。\n","第1引数と第2引数には、それぞれ範囲の開始値と終了値、第3引数には分割数を指定します。"]},{"cell_type":"code","metadata":{"id":"DfJyO905FpoL","executionInfo":{"status":"ok","timestamp":1601395532742,"user_tz":-540,"elapsed":2769,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"6ef2c7c1-eea4-4eb4-cc8b-41011933c8bb","colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["print(np.linspace(0, 1, 5)) # 0から1の値を4分割した値を要素に持つ配列"],"execution_count":20,"outputs":[{"output_type":"stream","text":["[0.   0.25 0.5  0.75 1.  ]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vl2TiTLTFpoU"},"source":["### `zeros` と `ones`\n","**`numpy.zeros()`** 関数は、`0` からなる配列を生成します。\n","同様に、**`numpy.ones()`** 関数は、`1` からなる配列を生成します。\n","どちらも、生成される形を第1引数に取ります。\n","デフォルトの要素型は、実数です。"]},{"cell_type":"code","metadata":{"id":"3VTOPlvhFpoV","executionInfo":{"status":"ok","timestamp":1601395532742,"user_tz":-540,"elapsed":2766,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"ced63e62-d1cb-420f-c689-a2f390f420c8","colab":{"base_uri":"https://localhost:8080/","height":139}},"source":["print(np.zeros(4))     # 長さ4の1次元配列\n","print(np.zeros((2,3))) # 2×3の2次元配列を生成\n","print(np.ones(4))     # 長さ4の1次元配列\n","print(np.ones((2,3))) # 2×3の2次元配列を生成"],"execution_count":21,"outputs":[{"output_type":"stream","text":["[0. 0. 0. 0.]\n","[[0. 0. 0.]\n"," [0. 0. 0.]]\n","[1. 1. 1. 1.]\n","[[1. 1. 1.]\n"," [1. 1. 1.]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KvpStS5QFpob"},"source":["### `random.rand`\n","**`numpy.random.rand()`** 関数は、0 以上 1 未満の乱数からなる配列を生成します。\n","引数には生成される配列の形を指定します。\n","要素型は実数に限定されます。"]},{"cell_type":"code","metadata":{"id":"mOtux173Fpob","executionInfo":{"status":"ok","timestamp":1601395532743,"user_tz":-540,"elapsed":2764,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"c9dc49c3-d28f-4c17-bf5f-44e52f8296bc","colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["print(np.random.rand(4))   # 長さ4の1次元配列\n","print(np.random.rand(2,3)) # 2×3の2次元配列を生成"],"execution_count":22,"outputs":[{"output_type":"stream","text":["[0.38063817 0.95235132 0.48696208 0.75122685]\n","[[0.34604667 0.48362317 0.29170527]\n"," [0.66058926 0.89357668 0.6560701 ]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rkeln9krFpof"},"source":["この他にも、**`numpy.random.randn()`**・**`numpy.random.binomial()`**・**`numpy.random.poisson()`** は、それぞれ、正規分布・二項分布・ポアソン分布の乱数からなる配列を生成します。"]},{"cell_type":"markdown","metadata":{"id":"FgGYr0zFFpof"},"source":["## 練習\n","\n","引数に整数 $n$ を取り、$i$ から始まる連番の整数からなる配列を$i$番目 ($i\\ge 0$) の行として持つ $n\\times n$ の2次元配列を返す関数 `range_square_matrix()` を、`arange()` を用いて定義してください。\n","\n","たとえば、`range_square_matrix(3)` は、\n","```\n","[[0 1 2]\n"," [1 2 3]\n"," [2 3 4]]\n","```\n","と印字されるような2次元配列を返します。"]},{"cell_type":"code","metadata":{"id":"wa5DMIyYFpog","executionInfo":{"status":"ok","timestamp":1601395532743,"user_tz":-540,"elapsed":2763,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["def arange_square_matrix(n):\n","    a = []\n","    for i in range(n):\n","      a.append(np.arange(n))\n","      a[i] += i\n","    return a"],"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dm5W4awSFpok"},"source":["以下のセルを実行して、`True` が表示されることを確認してください。"]},{"cell_type":"code","metadata":{"tags":["raises-exception"],"id":"S65aP359Fpol","executionInfo":{"status":"ok","timestamp":1601395532743,"user_tz":-540,"elapsed":2760,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"4b44ca26-73b3-4072-ff40-28712b6fc7b8","colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["print(all(map(all,(arange_square_matrix(3) == np.array([[0,1,2],[1,2,3],[2,3,4]])))))"],"execution_count":24,"outputs":[{"output_type":"stream","text":["True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mElWyJzsFpoo"},"source":["## 配列要素の操作\n","\n","### インデックスアクセス\n","\n","配列の要素には、リストの場合と同様に、`0` から始まるインデックスを使って参照できます。\n","リストと同じく、配列の先頭要素のインデックスは `0`、最後の要素のインデックスは `-1` となります。"]},{"cell_type":"code","metadata":{"id":"WC7UOLX9Fpoo","executionInfo":{"status":"ok","timestamp":1601395532744,"user_tz":-540,"elapsed":2750,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f04e5cc4-907d-4294-aca8-f26b020948cc","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a = np.arange(3)\n","print(a)"],"execution_count":25,"outputs":[{"output_type":"stream","text":["[0 1 2]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OP1j8QTuFpor","executionInfo":{"status":"ok","timestamp":1601395532744,"user_tz":-540,"elapsed":2729,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f639d777-1e2f-4fa2-9ea4-73a3e37a707b","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a[0]"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"bqpH2e_jFpov","executionInfo":{"status":"ok","timestamp":1601395532744,"user_tz":-540,"elapsed":2709,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"0b4fa911-8e25-406c-84c1-440b6695fb27","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a[-1]"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"DEAAZdNlFpox","executionInfo":{"status":"ok","timestamp":1601395532744,"user_tz":-540,"elapsed":2688,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"1251b59d-9a0d-4d87-eb14-4d3d9ebf7813","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a[-1] = 3 # 要素への代入もできる\n","print(a)"],"execution_count":28,"outputs":[{"output_type":"stream","text":["[0 1 3]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8WHUF8gyFpo1"},"source":["多次元配列では、高次元（入れ子の外側）から順にインデックスを指定します。\n","特に2次元配列、すなわち行列の場合は、行インデックスと列インデックスを順に指定します。"]},{"cell_type":"code","metadata":{"id":"sBwzPWrpFpo2","executionInfo":{"status":"ok","timestamp":1601395532745,"user_tz":-540,"elapsed":2669,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"bb67419c-a976-455f-8e82-e96933d286d9","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["a = np.arange(6).reshape(2,3)\n","print(a)"],"execution_count":29,"outputs":[{"output_type":"stream","text":["[[0 1 2]\n"," [3 4 5]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"m6j_gRYTFpo5","executionInfo":{"status":"ok","timestamp":1601395532745,"user_tz":-540,"elapsed":2649,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"cbbf6963-2a28-4498-8b46-b83c3fa6ebc5","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a[1,2] # 行と列のインデックスをまとめて指定"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"OT2LyUP1Fpo7","executionInfo":{"status":"ok","timestamp":1601395532745,"user_tz":-540,"elapsed":2629,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"683d0d90-f3f9-442c-a353-156cf50b7a67","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["a[1,2] = 6 # 要素への代入もできる\n","print(a)"],"execution_count":31,"outputs":[{"output_type":"stream","text":["[[0 1 2]\n"," [3 4 6]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CbvMqzaFFpo-"},"source":["### スライス\n","\n","リストと同様に、配列の**スライス**を構築できます。"]},{"cell_type":"code","metadata":{"id":"qE2HQ7giFpo_","executionInfo":{"status":"ok","timestamp":1601395532746,"user_tz":-540,"elapsed":2610,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"b3b57614-0d61-4156-b2eb-03f436784f52","colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["a = np.arange(5)\n","print(a)\n","print(a[1:4])\n","print(a[1:])\n","print(a[:-2])\n","print(a[::2])\n","print(a[::-1])"],"execution_count":32,"outputs":[{"output_type":"stream","text":["[0 1 2 3 4]\n","[1 2 3]\n","[1 2 3 4]\n","[0 1 2]\n","[0 2 4]\n","[4 3 2 1 0]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"gc7GdszIFppB"},"source":["配列のスライスに対して代入すると、右辺の値がコピーされて、スライス元の配列にまとめて代入されます。"]},{"cell_type":"code","metadata":{"id":"aSCmb1hHFppC","executionInfo":{"status":"ok","timestamp":1601395532746,"user_tz":-540,"elapsed":2590,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"65b2858e-f09a-418f-bb46-24aeb33d121e","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["a = np.arange(5)\n","print(a)\n","a[1:4] = 6\n","print(a)\n","a = np.arange(5)\n","a[::2] = 6\n","print(a)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["[0 1 2 3 4]\n","[0 6 6 6 4]\n","[6 1 6 3 6]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2wsxXOnoFppE"},"source":["一方、リストに対しては、以下はエラーになります。"]},{"cell_type":"code","metadata":{"tags":["raises-exception"],"id":"F9IyqV15FppF","executionInfo":{"status":"error","timestamp":1601395532749,"user_tz":-540,"elapsed":2572,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"3ed59bd0-8ffe-4c88-b53c-0b0ed851c9c0","colab":{"base_uri":"https://localhost:8080/","height":215}},"source":["a = [0,1,2,3,4]\n","print(a)\n","a[1:4] = 6"],"execution_count":34,"outputs":[{"output_type":"stream","text":["[0, 1, 2, 3, 4]\n"],"name":"stdout"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-f5862dc9855f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0ma\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: can only assign an iterable"]}]},{"cell_type":"code","metadata":{"id":"dDsNUoOqFppI","executionInfo":{"status":"aborted","timestamp":1601395532746,"user_tz":-540,"elapsed":2548,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["a = [0,1,2,3,4]\n","print(a)\n","a[1:4] = [6]\n","print(a)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0uriXTDdFppK"},"source":["このように、配列のスライスに対する代入の振舞いは、リストの場合と異なることに注意してください。\n","\n","多次元配列に対しては、インデックスの参照と同様に、高い次元のスライスから順に並べて指定します。"]},{"cell_type":"code","metadata":{"id":"p_ib0tZwFppL","executionInfo":{"status":"aborted","timestamp":1601395532747,"user_tz":-540,"elapsed":2548,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["a = np.arange(9).reshape(3,3)\n","print(a)\n","print(a[:2,:2])\n","print(a[1:,1:])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PQvExCUuFppP"},"source":["多次元配列に対するスライスは、入れ子リストに対するスライスとは意味が異なることに注意してください。"]},{"cell_type":"markdown","metadata":{"id":"cGr4a2mxFppQ"},"source":["### for文\n","\n","リストと同様に、for文を用いて、配列要素への反復処理を記述できます。"]},{"cell_type":"code","metadata":{"id":"YlXhLTfuFppS","executionInfo":{"status":"aborted","timestamp":1601395532747,"user_tz":-540,"elapsed":2527,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["for v in np.arange(3):\n","    print(v)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qpy5UQN2FppV"},"source":["多次元配列の場合は、最外の配列に対して反復します。\n","つまり、2次元配列の場合、行の配列に対する反復処理となります。"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"6Rcpnfk-FppV","executionInfo":{"status":"aborted","timestamp":1601395532747,"user_tz":-540,"elapsed":2507,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["for row in np.arange(6).reshape(2,3):\n","    print(row)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6QZMjp84FppX"},"source":["for文と併用される `enumerate()` の多次元配列版として、`numpy.ndenumerate()` 関数が提供されています。\n","`numpy.ndenumerate()` は、（多次元）インデックスと要素の組を列挙します。"]},{"cell_type":"code","metadata":{"id":"hD3j_-C9FppY","executionInfo":{"status":"aborted","timestamp":1601395532748,"user_tz":-540,"elapsed":2488,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["for idx, e in np.ndenumerate(np.arange(6).reshape(2,3)):\n","    print(idx, e)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yMOcwgJPFppa","executionInfo":{"status":"aborted","timestamp":1601395532748,"user_tz":-540,"elapsed":2467,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["for idx, e in np.ndenumerate(np.arange(3)):\n","    print(idx, e)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dI8PUPaQFppc"},"source":["## 要素毎の演算\n","\n","配列に対する要素毎の演算は、簡潔に記述できます。\n","しかも、for文で記述するより、効率がよいです。\n","要素毎の演算を上手く使えるかどうかが、NumPyプログラミングの肝と言っても過言ではないでしょう。\n","\n","### **配列のスカラ演算**\n","\n","配列とスカラとの算術演算を記述すると、要素毎のスカラ演算となります。\n","演算結果として、新しい配列が返ります。"]},{"cell_type":"code","metadata":{"id":"UPSYyWayFppd","executionInfo":{"status":"aborted","timestamp":1601395532748,"user_tz":-540,"elapsed":2447,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["a = np.arange(4)\n","print(a)\n","\n","print(a + 1) # 各要素に1を加算\n","print(a - 1) # 各要素に1を減算\n","print(a * 2) # 各要素に2を乗算\n","print(a / 2) # 各要素を2で除算\n","print(a // 2) # 各要素を2で整数除算\n","print(a % 2) # 各要素に2の剰余演算\n","print(a ** 2) # 各要素を2乗\n","\n","print(1 + a) # 左側がスカラでもよい\n","print(1 - a) # 左側がスカラでもよい\n","print(2 * a) # 左側がスカラでもよい\n","b = a + 1\n","print(1 / b) # 左側がスカラでもよい\n","print(9 // b) # 左側がスカラでもよい"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EbgZcFuKFppe"},"source":["### **配列同士の演算**\n","\n","形が同じ配列同士の算術演算は、同じ位置の要素同士の演算となります。\n","演算結果として、新しい配列が返ります。"]},{"cell_type":"code","metadata":{"id":"1qEa1Ro5Fppf","executionInfo":{"status":"aborted","timestamp":1601395532749,"user_tz":-540,"elapsed":2428,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["a = np.arange(4).reshape(2,2)\n","b = np.arange(1,5).reshape(2,2)\n","print(a)\n","print(b)\n","print(a + b) \n","print(a - b)\n","print(a * b)\n","print(a / b)\n","c = 3 * a\n","print(c // b)\n","print(a % b)\n","print(a ** b)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jBK4_fswFpph"},"source":["実は、形が同じでない配列同士の算術演算も可能ですが、振舞いが複雑なので間違いやすいです。\n","配列同士の算術演算は、形が同じ配列に限定する方が賢明です。"]},{"cell_type":"markdown","metadata":{"id":"-GfVc21gFpph"},"source":["### ユニバーサル関数\n","\n","NumPyには**ユニバーサル関数**と呼ばれる、任意の形の配列を取り、各要素に所定の演算を与えた結果を返す関数があります。\n","その代表例は、**`numpy.sqrt()`** 関数です。"]},{"cell_type":"code","metadata":{"id":"d4ssdhPdFppk","executionInfo":{"status":"aborted","timestamp":1601395532749,"user_tz":-540,"elapsed":2413,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["a = np.zeros(3) + 2\n","print(a)\n","print(np.sqrt(a)) # 各要素はsqrt(2)\n","b = np.zeros((2,2)) + 2\n","print(np.sqrt(b)) # 各要素はsqrt(2)\n","print(np.sqrt(2)) # スカラ（0次元配列）も扱える"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"azNIzm3nFppo"},"source":["この他にも、多数のユニバーサル関数が提供されています。\n","詳しくは、[ユニバーサル関数の一覧](https://docs.scipy.org/doc/numpy-1.14.0/reference/ufuncs.html#available-ufuncs)を参照してください。"]},{"cell_type":"markdown","metadata":{"id":"RwlI2j9xFppp"},"source":["## よく使われる配列操作\n","### `dot`\n","\n","**`numpy.dot()`** は、2つの配列を引数に取り、そのドット積を返します。\n","両者が1次元配列のときは、ベクトル内積と等しいです。"]},{"cell_type":"code","metadata":{"id":"ew-CteyhFppp","executionInfo":{"status":"ok","timestamp":1601395545017,"user_tz":-540,"elapsed":1825,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"25fe01c8-d795-4f67-a143-0126caa38d08","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["np.dot(np.arange(4), np.arange(1,5)) # 0*1 + 1*2 + 2*3 + 3*4"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["20"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"markdown","metadata":{"id":"48JCWC9JFppr"},"source":["2次元配列同士だと、行列乗算と等しいです。"]},{"cell_type":"code","metadata":{"id":"uhvneQUPFpps","executionInfo":{"status":"ok","timestamp":1601395626314,"user_tz":-540,"elapsed":684,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"107925df-cdbb-4e93-9782-4628d35d971c","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# [[0 1]     [[1 2]\n","#  [2 3]] と  [3 4]] の行列積\n","print(np.dot(np.arange(4).reshape(2,2), np.arange(1,5).reshape(2,2)))"],"execution_count":36,"outputs":[{"output_type":"stream","text":["[[ 3  4]\n"," [11 16]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VB37Te7LFppu"},"source":["### `sort`\n","\n","**`numpy.sort()`** 関数は、昇順でソートされた新しい配列を返します。\n","これは、組み込み関数 `sorted()` の配列版です。"]},{"cell_type":"code","metadata":{"id":"nuOkvX0LFppv","executionInfo":{"status":"ok","timestamp":1601395699432,"user_tz":-540,"elapsed":872,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"27932e6a-25f0-428d-d40c-0f9a3ac4c423","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["a = np.array([3, 4, -1, 0, 2])\n","print(a)\n","print(np.sort(a))\n","print(a)"],"execution_count":39,"outputs":[{"output_type":"stream","text":["[ 3  4 -1  0  2]\n","[-1  0  2  3  4]\n","[ 3  4 -1  0  2]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"C8_Y4kwQFppy"},"source":["一方、配列の **`sort()`** メソッドは、配列を破壊的に（インプレースで）ソートします。\n","これは、リストの `sort()` メソッドの配列版です。"]},{"cell_type":"code","metadata":{"id":"s4zY4baAFppz","executionInfo":{"status":"ok","timestamp":1601395633197,"user_tz":-540,"elapsed":654,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"59227d96-3d8c-488f-d6ac-8a0b030427c4","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["a = np.array([3, 4, -1, 0, 2])\n","print(a)\n","a.sort()\n","print(a)"],"execution_count":38,"outputs":[{"output_type":"stream","text":["[ 3  4 -1  0  2]\n","[-1  0  2  3  4]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lJ5VQ-k_Fpp2"},"source":["### `sum`, `max`, `min`, `mean`\n","\n","配列のメソッド **`sum()`**・**`max()`**・**`min()`**・**`mean()`** は、それぞれ総和・最大値・最小値・算術平均を返します。\n","これらのメソッドは、引数が与えられない場合、全要素を集計した結果を返します。\n","多次元配列の場合、集計する次元を指定できます。\n","具体的には、2次元配列の場合、`0` を指定すると各列に、`1` を指定すると各行に、対応するメソッドを適用した結果が返されます。"]},{"cell_type":"code","metadata":{"id":"xhQ9HgD3Fpp3","executionInfo":{"status":"ok","timestamp":1601395782916,"user_tz":-540,"elapsed":609,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"f743410e-3669-40f3-ab80-e1b71a1aea9f","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["a = np.arange(6).reshape(2,3)\n","print(a)\n","print(a.sum())\n","print(a.sum(0))\n","print(a.sum(1))"],"execution_count":40,"outputs":[{"output_type":"stream","text":["[[0 1 2]\n"," [3 4 5]]\n","15\n","[3 5 7]\n","[ 3 12]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KZPAIm1HFpp5"},"source":["この他にも、多数の数学・統計関連のメソッドや関数が提供されています。\n","詳しくは、[数学関数](https://docs.scipy.org/doc/numpy/reference/routines.math.html)や[統計関数](https://docs.scipy.org/doc/numpy/reference/routines.statistics.html)を参照してください。"]},{"cell_type":"markdown","metadata":{"id":"Uxz6xkCRFpp6"},"source":["## 配列の保存と復元\n","\n","配列は、ファイルに保存したり、ファイルから読み出したりすることが、簡単にできます。\n","\n","**`numpy.savetxt()`** 関数は、与えられた配列を指定されたファイル名をつけてテキスト形式で保存します。"]},{"cell_type":"code","metadata":{"id":"tls8ct8YFpp6","executionInfo":{"status":"ok","timestamp":1601396353679,"user_tz":-540,"elapsed":1089,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["np.savetxt('arange3.txt', np.arange(3))"],"execution_count":41,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OQqdJcwvFpp8"},"source":["この `arange3.txt` は、次のような内容になっているはずです。\n","```\n","0.000000000000000000e+00\n","1.000000000000000000e+00\n","2.000000000000000000e+00\n","```\n","2次元配列は、列が空白区切りで保存されます"]},{"cell_type":"code","metadata":{"id":"5T29vS2ZFpp8","executionInfo":{"status":"ok","timestamp":1601396365640,"user_tz":-540,"elapsed":1467,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}}},"source":["np.savetxt('arange2x3.txt', np.arange(6).reshape(2,3))"],"execution_count":42,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z6imyxgpFpp-"},"source":["この `arange2x3.txt` は、次のような内容になっているはずです。\n","```\n","0.000000000000000000e+00 1.000000000000000000e+00 2.000000000000000000e+00\n","3.000000000000000000e+00 4.000000000000000000e+00 5.000000000000000000e+00\n","```\n","\n","一方、**`numpy.loadtxt()`** 関数は、与えられた名前のファイルに保存された配列を復元します。"]},{"cell_type":"code","metadata":{"id":"8spK8asjFpp_","executionInfo":{"status":"ok","timestamp":1601396375803,"user_tz":-540,"elapsed":1096,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"4f7333f1-e5e3-4428-fd0e-a4d9b3dc98d0","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["a = np.loadtxt('arange2x3.txt')\n","print(a)"],"execution_count":43,"outputs":[{"output_type":"stream","text":["[[0. 1. 2.]\n"," [3. 4. 5.]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"51tuX8_wFpqA"},"source":["保存するときに、列の区切り文字をデフォルトの `' '` 以外にしたい場合、`savetxt()` の `delimiter` 引数に区切り文字（列）を指定します。これを復元するときには、`loadtxt()` の `delimiter` 引数に同じ値を指定する必要があります。\n","ただし、区切り文字列はASCII（正確にはLatin-1）で解釈可能でなければなりません。\n","\n","大規模な配列をテキスト形式で保存すると、ファイルサイズがとても大きくなります。\n","そういう場合、圧縮保存が有用です。\n","\n","保存するファイル名の拡張子を `.gz` とすることで、`savetxt()` は自動的にGZip形式で圧縮して保存します。\n","復元するファイル名の拡張子が `.gz` であれば、`loadtxt()` はGZip形式だと判断して、自動的に解凍して復元します。"]},{"cell_type":"markdown","metadata":{"id":"ActKa5x8FpqB"},"source":["## ▲**真理値配列によるインデックスアクセス**\n","\n","配列に対して、比較演算を適用すると、算術演算と同様に要素毎に演算されて、真理値の配列が返ります。"]},{"cell_type":"code","metadata":{"id":"LivTp0Q1FpqB","executionInfo":{"status":"ok","timestamp":1601396489854,"user_tz":-540,"elapsed":1158,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"e5cee092-dc15-43b7-821c-c41fcda6049c","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["a = np.arange(6)\n","print(a)\n","print(a < 3)"],"execution_count":44,"outputs":[{"output_type":"stream","text":["[0 1 2 3 4 5]\n","[ True  True  True False False False]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"gaM0VErQFpqD"},"source":["このように作られた真理値配列は、インデックスとして利用することができます。\n","これによって、条件を満たす範囲を取り出すような記述が可能になります。\n","次の具体例を見てみましょう。"]},{"cell_type":"code","metadata":{"id":"-PB09f_CFpqD","executionInfo":{"status":"ok","timestamp":1601397334627,"user_tz":-540,"elapsed":619,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"4b4f2167-dc7e-482c-d9d9-1cc99b658cd7","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a = np.array([0,1,2,-3,-4,5,-6,-7])\n","print(a)\n","print(a[a < 0]) # 負の要素を取り出し\n","print(a[(a < 0) & (a % 2 == 0)]) # 負で偶数の要素を取り出し\n","a[a < 0] = 8 # 負の要素を8に上書き\n","print(a)"],"execution_count":45,"outputs":[{"output_type":"stream","text":["[ 0  1  2 -3 -4  5 -6 -7]\n","[-3 -4 -6 -7]\n","[-4 -6]\n","[0 1 2 8 8 5 8 8]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yQxofpOOFpqG"},"source":["一見すると単なる条件式のように見えますが、インデックスとなるのは真理値ではなく真理値の配列です。\n","したがって、真理値を返す `and`・`or`・`not` の代わりに、要素毎の演算を行う `&`・`|`・`~` を用いる必要があります。\n","\n","同様の記法は、7-1で扱うpandasライブラリでも利用されます。"]},{"cell_type":"markdown","metadata":{"id":"tOOZW9TRFpqG"},"source":["## ▲線形代数の演算\n","\n","`numpy.dot()` は、2次元配列を与えたときには、行列積となりました。\n","それだけでなく、行列積専用の **`numpy.matmul()`** も提供されています。\n","\n","また、単位行列は **`numpy.identity()`** 関数で作成することができます。\n","引数に行列のサイズを指定します。"]},{"cell_type":"code","metadata":{"id":"VanST9xzFpqG","executionInfo":{"status":"ok","timestamp":1601398908499,"user_tz":-540,"elapsed":759,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"0b9d2b95-41e9-4be3-fb66-804dcdf6ca7e","colab":{"base_uri":"https://localhost:8080/","height":170}},"source":["I = np.identity(3)\n","print(I)\n","a = np.arange(9).reshape(3,3)\n","print(a)\n","print(np.matmul(a, I))"],"execution_count":46,"outputs":[{"output_type":"stream","text":["[[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]]\n","[[0 1 2]\n"," [3 4 5]\n"," [6 7 8]]\n","[[0. 1. 2.]\n"," [3. 4. 5.]\n"," [6. 7. 8.]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QauJw8H4FpqI"},"source":["**`numpy.linalg.norm()`** 関数は、与えられたベクトル（1次元配列）もしくは行列（2次元配列）のノルムを返します。"]},{"cell_type":"code","metadata":{"id":"O5CGBbIwFpqJ","executionInfo":{"status":"ok","timestamp":1601399198883,"user_tz":-540,"elapsed":674,"user":{"displayName":"Reon Akiyama","photoUrl":"","userId":"04074901317082462028"}},"outputId":"6e977170-d3f6-4d9d-cfd2-f4ba533b4df0","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["np.linalg.norm(np.ones(3)) # ユークリッドノルムを計算するのでsqrt(3)と等しい"],"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.7320508075688772"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"markdown","metadata":{"id":"R3YoFly3FpqL"},"source":["NumPyでは、行列の分解、転置、行列式などの計算を含む線形代数の演算は、**`numpy.linalg`** モジュールで提供されています。\n","詳しくは、[線形代数関連関数](https://docs.scipy.org/doc/numpy/reference/routines.linalg.html)を参照してください。"]},{"cell_type":"markdown","metadata":{"id":"eOIiRkS4FpqL"},"source":["## 練習の解答"]},{"cell_type":"code","metadata":{"id":"SpQS2C9JFpqM"},"source":["def arange_square_matrix(n):\n","    return np.array([np.arange(i, n+i) for i in range(n)])"],"execution_count":null,"outputs":[]}]}